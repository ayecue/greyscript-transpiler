// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse default scripts ascii.src 1`] = `
"AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if (signs.hasIndex(char)) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors)==\\"string\\") then
r[0]=[\\"<color=#\\"+colors+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors+\\">\\"]+r[2]+[\\"</color>\\"]
else if (typeof(colors)==\\"list\\") then
r[0]=[\\"<color=#\\"+colors[0]+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors[1]+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors[2]+\\">\\"]+r[2]+[\\"</color>\\"]
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))"
`;

exports[`parse default scripts ascii.src beautify 1`] = `
"AsciiGen = {}

map = {}

map.a = [
	\\"||¯|| \\",
	\\"||_|| \\",
	\\"|| || \\",
]
map.b = [
	\\"||¯/ \\",
	\\"|| \\\\ \\",
	\\"||_/ \\",
]
map.c = [
	\\"||¯ \\",
	\\"||  \\",
	\\"||_ \\",
]
map.d = [
	\\"||¯\\\\\\\\ \\",
	\\"|| // \\",
	\\"||//  \\",
]
map.e = [
	\\"||¯ \\",
	\\"||- \\",
	\\"||_ \\",
]
map.f = [
	\\"||¯ \\",
	\\"||_ \\",
	\\"||  \\",
]
map.g = [
	\\"||¯¯  \\",
	\\"|| \\\\\\\\ \\",
	\\"||_|| \\",
]
map.h = [
	\\"|| || \\",
	\\"||-|| \\",
	\\"|| || \\",
]
map.i = [
	\\"|| \\",
	\\"|| \\",
	\\"|| \\",
]
map.j = [
	\\" ¯||¯ \\",
	\\"  ||  \\",
	\\"|_||  \\",
]
map.k = [
	\\"||  / \\",
	\\"|| /  \\",
	\\"||¯\\\\\\\\ \\",
]
map.l = [
	\\"||  \\",
	\\"||  \\",
	\\"||_ \\",
]
map.m = [
	\\"||\\\\\\\\/|| \\",
	\\"||   || \\",
	\\"||   || \\",
]
map.n = [
	\\"||\\\\\\\\ || \\",
	\\"|| \\\\\\\\|| \\",
	\\"||  \\\\|| \\",
]
map.o = [
	\\"||¯|| \\",
	\\"|| || \\",
	\\"||_|| \\",
]
map.p = [
	\\"||¯|| \\",
	\\"||_|| \\",
	\\"||    \\",
]
map.q = [
	\\"||¯||  \\",
	\\"|| ||  \\",
	\\"||_||¬ \\",
]
map.r = [
	\\"||¯|| \\",
	\\"||¯\\\\\\\\ \\",
	\\"|| || \\",
]
map.s = [
	\\"||¯¯ \\",
	\\" \\\\\\\\  \\",
	\\"__|| \\",
]
map.t = [
	\\"¯||¯ \\",
	\\" ||  \\",
	\\" ||  \\",
]
map.u = [
	\\"|| || \\",
	\\"|| || \\",
	\\"||_|| \\",
]
map.v = [
	\\"\\\\\\\\ || \\",
	\\" \\\\\\\\|| \\",
	\\"  \\\\\\\\| \\",
]
map.w = [
	\\"\\\\\\\\ |\\\\\\\\ | \\",
	\\" \\\\\\\\| \\\\\\\\| \\",
	\\"  \\\\\\\\  \\\\\\\\ \\",
]
map.x = [
	\\"\\\\\\\\  / \\",
	\\" \\\\\\\\/  \\",
	\\" //\\\\  \\",
]
map.y = [
	\\"\\\\\\\\  // \\",
	\\" \\\\\\\\//  \\",
	\\"  ||   \\",
]
map.z = [
	\\"¯// \\",
	\\"//  \\",
	\\"||_ \\",
]
map[\\"0\\"] = [
	\\"||¯|| \\",
	\\"||x|| \\",
	\\"||_|| \\",
]
map[\\"1\\"] = [
	\\"'|| \\",
	\\" || \\",
	\\" || \\",
]
map[\\"2\\"] = [
	\\"¯¯|| \\",
	\\"||¯  \\",
	\\"||_  \\",
]
map[\\"3\\"] = [
	\\"¯|| \\",
	\\"-|| \\",
	\\"_|| \\",
]
map[\\"4\\"] = [
	\\" /|| \\",
	\\"/_|| \\",
	\\"  || \\",
]
map[\\"5\\"] = [
	\\"||¯¯ \\",
	\\" ¯|| \\",
	\\" _|| \\",
]
map[\\"6\\"] = [
	\\"||¯¯  \\",
	\\"||¯|| \\",
	\\"||_|| \\",
]
map[\\"7\\"] = [
	\\"¯¯// \\",
	\\" //  \\",
	\\"//   \\",
]
map[\\"8\\"] = [
	\\"||¯|| \\",
	\\"||-|| \\",
	\\"||_|| \\",
]
map[\\"9\\"] = [
	\\"||¯|| \\",
	\\"  ¯|| \\",
	\\"  //  \\",
]
map[\\" \\"] = [
	\\"  \\",
	\\"  \\",
	\\"  \\",
]

AsciiGen.MAP = map

AsciiGen.gen = function(str, colors)
	r = [
		[],
		[],
		[],
	]
	signs = self.MAP

	for char in str
		char = char.lower
		if signs.hasIndex(char) then
			r[0].push signs[char][0]
			r[1].push signs[char][1]
			r[2].push signs[char][2]
		end if
	end for

	if typeof(colors) == \\"string\\" then
		r[0] = [ \\"<color=#\\" + colors + \\">\\" ] + r[0] + [ \\"</color>\\" ]
		r[1] = [ \\"<color=#\\" + colors + \\">\\" ] + r[1] + [ \\"</color>\\" ]
		r[2] = [ \\"<color=#\\" + colors + \\">\\" ] + r[2] + [ \\"</color>\\" ]
	else if typeof(colors) == \\"list\\" then
		r[0] = [ \\"<color=#\\" + colors[0] + \\">\\" ] + r[0] + [ \\"</color>\\" ]
		r[1] = [ \\"<color=#\\" + colors[1] + \\">\\" ] + r[1] + [ \\"</color>\\" ]
		r[2] = [ \\"<color=#\\" + colors[2] + \\">\\" ] + r[2] + [ \\"</color>\\" ]
	end if

	return [
		r[0].join(\\"\\"),
		r[1].join(\\"\\"),
		r[2].join(\\"\\"),
	].join(\\"\\\\n\\")
end function

print AsciiGen.gen(\\"Hallo\\")"
`;

exports[`parse default scripts ascii.src beautify with custom settings 1`] = `
"AsciiGen = {}

map = {}

map.a = [
          \\"||¯|| \\",
          \\"||_|| \\",
          \\"|| || \\",
]
map.b = [
          \\"||¯/ \\",
          \\"|| \\\\ \\",
          \\"||_/ \\",
]
map.c = [
          \\"||¯ \\",
          \\"||  \\",
          \\"||_ \\",
]
map.d = [
          \\"||¯\\\\\\\\ \\",
          \\"|| // \\",
          \\"||//  \\",
]
map.e = [
          \\"||¯ \\",
          \\"||- \\",
          \\"||_ \\",
]
map.f = [
          \\"||¯ \\",
          \\"||_ \\",
          \\"||  \\",
]
map.g = [
          \\"||¯¯  \\",
          \\"|| \\\\\\\\ \\",
          \\"||_|| \\",
]
map.h = [
          \\"|| || \\",
          \\"||-|| \\",
          \\"|| || \\",
]
map.i = [
          \\"|| \\",
          \\"|| \\",
          \\"|| \\",
]
map.j = [
          \\" ¯||¯ \\",
          \\"  ||  \\",
          \\"|_||  \\",
]
map.k = [
          \\"||  / \\",
          \\"|| /  \\",
          \\"||¯\\\\\\\\ \\",
]
map.l = [
          \\"||  \\",
          \\"||  \\",
          \\"||_ \\",
]
map.m = [
          \\"||\\\\\\\\/|| \\",
          \\"||   || \\",
          \\"||   || \\",
]
map.n = [
          \\"||\\\\\\\\ || \\",
          \\"|| \\\\\\\\|| \\",
          \\"||  \\\\|| \\",
]
map.o = [
          \\"||¯|| \\",
          \\"|| || \\",
          \\"||_|| \\",
]
map.p = [
          \\"||¯|| \\",
          \\"||_|| \\",
          \\"||    \\",
]
map.q = [
          \\"||¯||  \\",
          \\"|| ||  \\",
          \\"||_||¬ \\",
]
map.r = [
          \\"||¯|| \\",
          \\"||¯\\\\\\\\ \\",
          \\"|| || \\",
]
map.s = [
          \\"||¯¯ \\",
          \\" \\\\\\\\  \\",
          \\"__|| \\",
]
map.t = [
          \\"¯||¯ \\",
          \\" ||  \\",
          \\" ||  \\",
]
map.u = [
          \\"|| || \\",
          \\"|| || \\",
          \\"||_|| \\",
]
map.v = [
          \\"\\\\\\\\ || \\",
          \\" \\\\\\\\|| \\",
          \\"  \\\\\\\\| \\",
]
map.w = [
          \\"\\\\\\\\ |\\\\\\\\ | \\",
          \\" \\\\\\\\| \\\\\\\\| \\",
          \\"  \\\\\\\\  \\\\\\\\ \\",
]
map.x = [
          \\"\\\\\\\\  / \\",
          \\" \\\\\\\\/  \\",
          \\" //\\\\  \\",
]
map.y = [
          \\"\\\\\\\\  // \\",
          \\" \\\\\\\\//  \\",
          \\"  ||   \\",
]
map.z = [
          \\"¯// \\",
          \\"//  \\",
          \\"||_ \\",
]
map[\\"0\\"] = [
          \\"||¯|| \\",
          \\"||x|| \\",
          \\"||_|| \\",
]
map[\\"1\\"] = [
          \\"'|| \\",
          \\" || \\",
          \\" || \\",
]
map[\\"2\\"] = [
          \\"¯¯|| \\",
          \\"||¯  \\",
          \\"||_  \\",
]
map[\\"3\\"] = [
          \\"¯|| \\",
          \\"-|| \\",
          \\"_|| \\",
]
map[\\"4\\"] = [
          \\" /|| \\",
          \\"/_|| \\",
          \\"  || \\",
]
map[\\"5\\"] = [
          \\"||¯¯ \\",
          \\" ¯|| \\",
          \\" _|| \\",
]
map[\\"6\\"] = [
          \\"||¯¯  \\",
          \\"||¯|| \\",
          \\"||_|| \\",
]
map[\\"7\\"] = [
          \\"¯¯// \\",
          \\" //  \\",
          \\"//   \\",
]
map[\\"8\\"] = [
          \\"||¯|| \\",
          \\"||-|| \\",
          \\"||_|| \\",
]
map[\\"9\\"] = [
          \\"||¯|| \\",
          \\"  ¯|| \\",
          \\"  //  \\",
]
map[\\" \\"] = [
          \\"  \\",
          \\"  \\",
          \\"  \\",
]

AsciiGen.MAP = map

AsciiGen.gen = function(str, colors)
          r = [
                    [],
                    [],
                    [],
          ]
          signs = self.MAP

          for char in str
                    char = char.lower
                    if signs.hasIndex(char) then
                              r[0].push(signs[char][0])
                              r[1].push(signs[char][1])
                              r[2].push(signs[char][2])
                    end if
          end for

          if typeof(colors) == \\"string\\" then
                    r[0] = [ \\"<color=#\\" + colors + \\">\\" ] + r[0] + [ \\"</color>\\" ]
                    r[1] = [ \\"<color=#\\" + colors + \\">\\" ] + r[1] + [ \\"</color>\\" ]
                    r[2] = [ \\"<color=#\\" + colors + \\">\\" ] + r[2] + [ \\"</color>\\" ]
          else if typeof(colors) == \\"list\\" then
                    r[0] = [ \\"<color=#\\" + colors[0] + \\">\\" ] + r[0] + [ \\"</color>\\" ]
                    r[1] = [ \\"<color=#\\" + colors[1] + \\">\\" ] + r[1] + [ \\"</color>\\" ]
                    r[2] = [ \\"<color=#\\" + colors[2] + \\">\\" ] + r[2] + [ \\"</color>\\" ]
          end if

          return [
                    r[0].join(\\"\\"),
                    r[1].join(\\"\\"),
                    r[2].join(\\"\\"),
          ].join(\\"\\\\n\\")
end function

print(AsciiGen.gen(\\"Hallo\\"))"
`;

exports[`parse default scripts ascii.src uglify 1`] = `
"globals.H=globals
H.t=\\"||¯|| \\"
H.s=\\"||_|| \\"
H.p=\\"|| || \\"
H.n=\\"||¯ \\"
H.r=\\"||  \\"
H.o=\\"||_ \\"
H.u=\\"||¯\\\\\\\\ \\"
H.q=\\"|| \\"
H.v=\\"  \\"
H.w=\\"<color=#\\"
H.y=\\">\\"
H.x=\\"</color>\\"
I={}
map={}
map.a=[t,s,p]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[n,r,o]
map.d=[u,\\"|| // \\",\\"||//  \\"]
map.e=[n,\\"||- \\",o]
map.f=[n,o,r]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",s]
map.h=[p,\\"||-|| \\",p]
map.i=[q,q,q]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",u]
map.l=[r,r,o]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[t,p,s]
map.p=[t,s,\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[t,u,p]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[p,p,s]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",o]
map[\\"0\\"]=[t,\\"||x|| \\",s]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",t,s]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[t,\\"||-|| \\",s]
map[\\"9\\"]=[t,\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[v,v,v]
I.MAP=map
I.gen=function(str,l)
a=[[],[],[]]
m=self.MAP
for char in str
char=char.lower
if (m.hasIndex(char)) then
a[0].push(m[char][0])
a[1].push(m[char][1])
a[2].push(m[char][2])
end if
end for
if (typeof(l)==\\"string\\") then
a[0]=[w+l+y]+a[0]+[x]
a[1]=[w+l+y]+a[1]+[x]
a[2]=[w+l+y]+a[2]+[x]
else if (typeof(l)==\\"list\\") then
a[0]=[w+l[0]+y]+a[0]+[x]
a[1]=[w+l[1]+y]+a[1]+[x]
a[2]=[w+l[2]+y]+a[2]+[x]
end if
return [a[0].join(\\"\\"),a[1].join(\\"\\"),a[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(I.gen(\\"Hallo\\"))"
`;

exports[`parse default scripts beautify-cases.src 1`] = `
"// binary + logical
test=1+2+3+4+5+6 and (2+3+4+5+6+(2+3+4+5+6+7))
//call expression
printAlign(\\"dieFace[1] - dieFace[6]\\",[dieFace[1],dieFace[2],dieFace[3],dieFace[4],dieFace[5],dieFace[6],{\\"foo\\":123,\\"was\\":\\"wo\\"}].join,123,123)
printAlign(1,2,3,4)
//object
test={}
test={\\"was\\":123}
test={\\"foo\\":123,\\"was\\":[\\"abc\\",1,234],\\"xx\\":{\\"foo\\":123,\\"ooo\\":{\\"foo\\":123,\\"was\\":\\"wo\\"},\\"was\\":\\"wo\\"},\\"123\\":\\"3\\"}
//list
test=[]
test=[\\"was\\"]
test=[\\"abc\\",1,[\\"abc\\",1,234],[\\"abc\\",[\\"abc\\",1,234],1,234],234]
// shorthand binary
test=test+5
test=test+4+5
test.abc=test.abc+5
test.abc=test.abc+4+5
// if
if (true) then
print(\\"test\\")
end if
if (true) then
print(\\"test\\")
else
print(\\"xd\\")
end if
if (true) then
test=[1,2,3,4,5]
end if
if (true) then
test=[1,2,3,4,5]
else
test=[5,4,3,2,1]
end if
if (true) then
print(\\"test\\")
else
print(\\"xd\\")
end if
if (true) then
print(\\"test\\")
else if (false) then
print(\\"xa\\")
else
print(\\"xd\\")
end if
test=function()
return [1,2,3,4,5]
end function
// comments
test=test+5
// test
// :D
test=[1,2,3,4]
// its a list
test=function()
// its a function
return 123
// it a return
end function
// its function end
for test in [123]
// my for loop
print(\\"test\\")
// some print
end for
// end for loop
// was
test={\\"was\\":123}
// was
test={\\"was\\":123,\\"foo\\":13,\\"bar\\":45}"
`;

exports[`parse default scripts beautify-cases.src beautify 1`] = `
"// binary + logical
test = 1 +
	2 +
	3 +
	4 +
	5 +
	6 and
	(
			2 +
			3 +
			4 +
			5 +
			6 +
			(
					2 +
					3 +
					4 +
					5 +
					6 +
					7))

// call expression
printAlign(
	\\"dieFace[1] - dieFace[6]\\",
	[
		dieFace[1],
		dieFace[2],
		dieFace[3],
		dieFace[4],
		dieFace[5],
		dieFace[6],
		{
			\\"foo\\": 123,
			\\"was\\": \\"wo\\",
		},
	].join,
	123,
	123)
printAlign(
	1,
	2,
	3,
	4)

// object
test = {}
test = { \\"was\\": 123 }
test = {
	\\"foo\\": 123,
	\\"was\\": [
		\\"abc\\",
		1,
		234,
	],
	\\"xx\\": {
		\\"foo\\": 123,
		\\"ooo\\": {
			\\"foo\\": 123,
			\\"was\\": \\"wo\\",
		},
		\\"was\\": \\"wo\\",
	},
	\\"123\\": \\"3\\",
}

// list
test = []
test = [ \\"was\\" ]
test = [
	\\"abc\\",
	1,
	[
		\\"abc\\",
		1,
		234,
	],
	[
		\\"abc\\",
		[
			\\"abc\\",
			1,
			234,
		],
		1,
		234,
	],
	234,
]

// shorthand binary
test = test + 5
test = test + 4 + 5
test.abc = test.abc + 5
test.abc = test.abc + 4 + 5

// if
if true then print(\\"test\\")
if true then print(\\"test\\") else print(\\"xd\\")
if true then test = [
	1,
	2,
	3,
	4,
	5,
]
if true then test = [
	1,
	2,
	3,
	4,
	5,
] else test = [
	5,
	4,
	3,
	2,
	1,
]
if true then
	print \\"test\\"
else
	print \\"xd\\"
end if
if true then
	print \\"test\\"
else if false then
	print \\"xa\\"
else
	print \\"xd\\"
end if

test = function
	return [
		1,
		2,
		3,
		4,
		5,
	]
end function


// comments
test = test + 5 // test
test = [
	1,
	2, // :D
	3,
	4,
] // its a list
test = function // its a function
	return 123 // it a return
end function // its function end
for test in [ 123 ] // my for loop
	print \\"test\\" // some print
end for // end for loop

test = { \\"was\\": 123 } // was
test = {
	\\"was\\": 123, // was
	\\"foo\\": 13,
	\\"bar\\": 45,
}"
`;

exports[`parse default scripts beautify-cases.src beautify with custom settings 1`] = `
"// binary + logical
test = 1 +
          2 +
          3 +
          4 +
          5 +
          6 and
          (
                              2 +
                              3 +
                              4 +
                              5 +
                              6 +
                              (
                                                  2 +
                                                  3 +
                                                  4 +
                                                  5 +
                                                  6 +
                                                  7))

// call expression
printAlign(
          \\"dieFace[1] - dieFace[6]\\",
          [
                    dieFace[1],
                    dieFace[2],
                    dieFace[3],
                    dieFace[4],
                    dieFace[5],
                    dieFace[6],
                    {
                              \\"foo\\": 123,
                              \\"was\\": \\"wo\\",
                    },
          ].join,
          123,
          123)
printAlign(
          1,
          2,
          3,
          4)

// object
test = {}
test = { \\"was\\": 123 }
test = {
          \\"foo\\": 123,
          \\"was\\": [
                    \\"abc\\",
                    1,
                    234,
          ],
          \\"xx\\": {
                    \\"foo\\": 123,
                    \\"ooo\\": {
                              \\"foo\\": 123,
                              \\"was\\": \\"wo\\",
                    },
                    \\"was\\": \\"wo\\",
          },
          \\"123\\": \\"3\\",
}

// list
test = []
test = [ \\"was\\" ]
test = [
          \\"abc\\",
          1,
          [
                    \\"abc\\",
                    1,
                    234,
          ],
          [
                    \\"abc\\",
                    [
                              \\"abc\\",
                              1,
                              234,
                    ],
                    1,
                    234,
          ],
          234,
]

// shorthand binary
test += 5
test = test + 4 + 5
test.abc += 5
test.abc = test.abc + 4 + 5

// if
if true then print(\\"test\\")
if true then print(\\"test\\") else print(\\"xd\\")
if true then test = [
          1,
          2,
          3,
          4,
          5,
]
if true then test = [
          1,
          2,
          3,
          4,
          5,
] else test = [
          5,
          4,
          3,
          2,
          1,
]
if true then
          print(\\"test\\")
else
          print(\\"xd\\")
end if
if true then
          print(\\"test\\")
else if false then
          print(\\"xa\\")
else
          print(\\"xd\\")
end if

test = function
          return [
                    1,
                    2,
                    3,
                    4,
                    5,
          ]
end function


// comments
test += 5 // test
test = [
          1,
          2, // :D
          3,
          4,
] // its a list
test = function // its a function
          return 123 // it a return
end function // its function end
for test in [ 123 ] // my for loop
          print(\\"test\\") // some print
end for // end for loop

test = { \\"was\\": 123 } // was
test = {
          \\"was\\": 123, // was
          \\"foo\\": 13,
          \\"bar\\": 45,
}"
`;

exports[`parse default scripts beautify-cases.src uglify 1`] = `
"globals.H=globals
H.U=1
H.X=4
H.T=5
H.O=\\"foo\\"
H.M=123
H.N=\\"was\\"
H.P=\\"wo\\"
H.Q=\\"abc\\"
H.R=234
H.S=true
H.V=\\"test\\"
H.W=\\"xd\\"
I=U+2+3+X+T+6 and (2+3+X+T+6+(2+3+X+T+6+7))
J(\\"dieFace[1] - dieFace[6]\\",[K[U],K[2],K[3],K[X],K[T],K[6],{O:M,N:P}].join,M,M)
J(U,2,3,X)
I={}
I={N:M}
I={O:M,N:[Q,U,R],\\"xx\\":{O:M,\\"ooo\\":{O:M,N:P},N:P},\\"123\\":\\"3\\"}
I=[]
I=[N]
I=[Q,U,[Q,U,R],[Q,[Q,U,R],U,R],R]
I=I+T
I=I+X+T
I.abc=I.abc+T
I.abc=I.abc+X+T
if (S) then
print(V)
end if
if (S) then
print(V)
else
print(W)
end if
if (S) then
I=[U,2,3,X,T]
end if
if (S) then
I=[U,2,3,X,T]
else
I=[T,X,3,2,U]
end if
if (S) then
print(V)
else
print(W)
end if
if (S) then
print(V)
else if (false) then
print(\\"xa\\")
else
print(W)
end if
I=function
return [U,2,3,X,T]
end function
I=I+T
I=[U,2,3,X]
I=function
return M
end function
for I in [M]
print(V)
end for
I={N:M}
I={N:M,O:13,\\"bar\\":45}"
`;

exports[`parse default scripts binary-expressions.src 1`] = `
"a=a/(b)
a=a*(b)
a=a-(b)
a=a+(b)
bitwise(\\"<<\\",a,b)
bitwise(\\">>\\",a,b)
w=bitwise(\\">>\\",bitwise(\\">>>\\",a,(bitwise(\\"<<\\",b,c))),a)
bitwise(\\"|\\",a,b)
bitwise(\\"&\\",a,b)
a^b
a and b
a or b"
`;

exports[`parse default scripts binary-expressions.src beautify 1`] = `
"a = a / (b)
a = a * (b)
a = a - (b)
a = a + (b)
bitwise(\\"<<\\", a, b)
bitwise(\\">>\\", a, b)
w = bitwise(\\">>\\", bitwise(\\">>>\\", a, (bitwise(\\"<<\\", b, c))), a)
bitwise(\\"|\\", a, b)
bitwise(\\"&\\", a, b)
a ^ b
a and b
a or b"
`;

exports[`parse default scripts binary-expressions.src beautify with custom settings 1`] = `
"a /= b
a *= b
a -= b
a += b
bitwise(\\"<<\\", a, b)
bitwise(\\">>\\", a, b)
w = bitwise(\\">>\\", bitwise(\\">>>\\", a, (bitwise(\\"<<\\", b, c))), a)
bitwise(\\"|\\", a, b)
bitwise(\\"&\\", a, b)
a ^ b
a and b
a or b"
`;

exports[`parse default scripts binary-expressions.src uglify 1`] = `
"I=I/(J)
I=I*(J)
I=I-(J)
I=I+(J)
bitwise(\\"<<\\",I,J)
bitwise(\\">>\\",I,J)
K=bitwise(\\">>\\",bitwise(\\">>>\\",I,(bitwise(\\"<<\\",J,L))),I)
bitwise(\\"|\\",I,J)
bitwise(\\"&\\",I,J)
I^J
I and J
I or J"
`;

exports[`parse default scripts comments.src 1`] = `
"//comment
myVariable
//comment2
test=2
//comment3"
`;

exports[`parse default scripts comments.src beautify 1`] = `
"// comment
myVariable // comment2
test = 2 // comment3"
`;

exports[`parse default scripts comments.src beautify with custom settings 1`] = `
"// comment
myVariable // comment2
test = 2 // comment3"
`;

exports[`parse default scripts comments.src uglify 1`] = `
"I
J=2"
`;

exports[`parse default scripts default-args.src 1`] = `
"test=function(arg1=0,arg2=\\"test\\")
print(arg1)
print(arg2)
end function
test
test(\\"foo\\",false)
var1=\\"test\\"
var2=\\"test\\"
var3=\\"test\\""
`;

exports[`parse default scripts default-args.src beautify 1`] = `
"test = function(arg1 = 0, arg2 = \\"test\\")
	print arg1
	print arg2
end function

test
test \\"foo\\", false

var1 = \\"test\\"
var2 = \\"test\\"
var3 = \\"test\\""
`;

exports[`parse default scripts default-args.src beautify with custom settings 1`] = `
"test = function(arg1 = 0, arg2 = \\"test\\")
          print(arg1)
          print(arg2)
end function

test
test(\\"foo\\", false)

var1 = \\"test\\"
var2 = \\"test\\"
var3 = \\"test\\""
`;

exports[`parse default scripts default-args.src uglify 1`] = `
"globals.H=globals
H.O=\\"test\\"
I=function(M=0,N=\\"test\\")
print(M)
print(N)
end function
I
I(\\"foo\\",false)
J=O
K=O
L=O"
`;

exports[`parse default scripts envar.src 1`] = `
"#include \\"../fixtures/envar-include.src\\";
myvar=\\"\\"foo\\"\\"
print(\\"0.2\\")"
`;

exports[`parse default scripts envar.src beautify 1`] = `
"#include \\"../fixtures/envar-include.src\\";

myvar = \\"\\"foo\\"\\"
print \\"0.2\\""
`;

exports[`parse default scripts envar.src beautify with custom settings 1`] = `
"#include \\"../fixtures/envar-include.src\\";

myvar = #envar test
print(#envar test2)"
`;

exports[`parse default scripts envar.src uglify 1`] = `
"#include \\"../fixtures/envar-include.src\\";
I=\\"\\"foo\\"\\"
print(\\"0.2\\")"
`;

exports[`parse default scripts greybel-utils.src 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger
print(7)
print(\\"unknown\\")"
`;

exports[`parse default scripts greybel-utils.src beautify 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger

print 7
print \\"unknown\\""
`;

exports[`parse default scripts greybel-utils.src beautify with custom settings 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
#envar TEST_ENV
debugger

print(#line)
print(#filename)"
`;

exports[`parse default scripts greybel-utils.src uglify 1`] = `
"#import I from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger
print(7)
print(\\"unknown\\")"
`;

exports[`parse default scripts greybel-utils-with-comments.src 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger"
`;

exports[`parse default scripts greybel-utils-with-comments.src beautify 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger"
`;

exports[`parse default scripts greybel-utils-with-comments.src beautify with custom settings 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
#envar TEST_ENV
debugger"
`;

exports[`parse default scripts greybel-utils-with-comments.src uglify 1`] = `
"#import I from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger"
`;

exports[`parse default scripts has-index.src 1`] = `
"globals.test=\\"was\\"
locals.foo=\\"moo\\"
print(globals.hasIndex(\\"test\\"))
print(locals.hasIndex(\\"foo\\"))
print(globals.hasIndex(\\"doesNotExist\\"))
print(locals.hasIndex(\\"doesNotExist\\"))"
`;

exports[`parse default scripts has-index.src beautify 1`] = `
"globals.test = \\"was\\"
locals.foo = \\"moo\\"

print globals.hasIndex(\\"test\\")
print locals.hasIndex(\\"foo\\")
print globals.hasIndex(\\"doesNotExist\\")
print locals.hasIndex(\\"doesNotExist\\")"
`;

exports[`parse default scripts has-index.src beautify with custom settings 1`] = `
"globals.test = \\"was\\"
locals.foo = \\"moo\\"

print(globals.hasIndex(\\"test\\"))
print(locals.hasIndex(\\"foo\\"))
print(globals.hasIndex(\\"doesNotExist\\"))
print(locals.hasIndex(\\"doesNotExist\\"))"
`;

exports[`parse default scripts has-index.src uglify 1`] = `
"H.I=\\"was\\"
locals.J=\\"moo\\"
print(H.hasIndex(\\"I\\"))
print(locals.hasIndex(\\"J\\"))
print(H.hasIndex(\\"doesNotExist\\"))
print(locals.hasIndex(\\"doesNotExist\\"))"
`;

exports[`parse default scripts import-code.src 1`] = `
"import_code(\\"./ascii\\")
import_code(\\"../fixtures/sub-import\\")
print(123)"
`;

exports[`parse default scripts import-code.src beautify 1`] = `
"import_code(\\"./ascii\\")
import_code(\\"../fixtures/sub-import\\")
print 123"
`;

exports[`parse default scripts import-code.src beautify with custom settings 1`] = `
"import_code(\\"./ascii\\")
import_code(\\"../fixtures/sub-import\\")
print(123)"
`;

exports[`parse default scripts import-code.src uglify 1`] = `
"import_code(\\"./ascii\\")
import_code(\\"../fixtures/sub-import\\")
print(123)"
`;

exports[`parse default scripts isa.src 1`] = `
"print(2 isa number)
print(2 isa string)
print(2 isa list)
print(2 isa map)
print(\\"abc\\" isa number)
print(\\"abc\\" isa string)
print(\\"abc\\" isa list)
print(\\"abc\\" isa map)
print([1,2,3] isa number)
print([1,2,3] isa string)
print([1,2,3] isa list)
print([1,2,3] isa map)
print({} isa number)
print({} isa string)
print({} isa list)
print({} isa map)
print({} isa funcRef)"
`;

exports[`parse default scripts isa.src beautify 1`] = `
"print 2 isa number
print 2 isa string
print 2 isa list
print 2 isa map

print \\"abc\\" isa number
print \\"abc\\" isa string
print \\"abc\\" isa list
print \\"abc\\" isa map

print(
	[
		1,
		2,
		3,
	] isa number)
print(
	[
		1,
		2,
		3,
	] isa string)
print(
	[
		1,
		2,
		3,
	] isa list)
print(
	[
		1,
		2,
		3,
	] isa map)

print {} isa number
print {} isa string
print {} isa list
print {} isa map

print {} isa funcRef
"
`;

exports[`parse default scripts isa.src beautify with custom settings 1`] = `
"print(2 isa number)
print(2 isa string)
print(2 isa list)
print(2 isa map)

print(\\"abc\\" isa number)
print(\\"abc\\" isa string)
print(\\"abc\\" isa list)
print(\\"abc\\" isa map)

print(
          [
                    1,
                    2,
                    3,
          ] isa number)
print(
          [
                    1,
                    2,
                    3,
          ] isa string)
print(
          [
                    1,
                    2,
                    3,
          ] isa list)
print(
          [
                    1,
                    2,
                    3,
          ] isa map)

print({} isa number)
print({} isa string)
print({} isa list)
print({} isa map)

print({} isa funcRef)
"
`;

exports[`parse default scripts isa.src uglify 1`] = `
"globals.H=globals
H.I=\\"abc\\"
print(2 isa number)
print(2 isa string)
print(2 isa list)
print(2 isa map)
print(I isa number)
print(I isa string)
print(I isa list)
print(I isa map)
print([1,2,3] isa number)
print([1,2,3] isa string)
print([1,2,3] isa list)
print([1,2,3] isa map)
print({} isa number)
print({} isa string)
print({} isa list)
print({} isa map)
print({} isa funcRef)"
`;

exports[`parse default scripts map.src 1`] = `
"test={{\\"myTest\\":0,1:2}:true}
test2={[12,14]:true}
test3={test:234}
test4={true:\\"foo\\"}
test5={123:\\"bar\\"}"
`;

exports[`parse default scripts map.src beautify 1`] = `
"test = { {
	\\"myTest\\": 0,
	1: 2,
}: true }
test2 = { [
	12,
	14,
]: true }
test3 = { test: 234 }
test4 = { true: \\"foo\\" }
test5 = { 123: \\"bar\\" }"
`;

exports[`parse default scripts map.src beautify with custom settings 1`] = `
"test = { {
          \\"myTest\\": 0,
          1: 2,
}: true }
test2 = { [
          12,
          14,
]: true }
test3 = { test: 234 }
test4 = { true: \\"foo\\" }
test5 = { 123: \\"bar\\" }"
`;

exports[`parse default scripts map.src uglify 1`] = `
"globals.H=globals
H.N=true
I={{\\"myTest\\":0,1:2}:N}
J={[12,14]:N}
K={I:234}
L={N:\\"foo\\"}
M={123:\\"bar\\"}"
`;

exports[`parse default scripts multiline-comment.src 1`] = `
"//
//
//
//my Test
//
//  **
print(\\"test\\")
//
//
//  another comment
//
//  
// one line comment "
`;

exports[`parse default scripts multiline-comment.src beautify 1`] = `
"//
//
//
//my Test
//
//  **"
`;

exports[`parse default scripts multiline-comment.src beautify with custom settings 1`] = `
"//
//
//
//my Test
//
//  **"
`;

exports[`parse default scripts multiline-comment.src uglify 1`] = `"print(\\"test\\")"`;

exports[`parse default scripts negation.src 1`] = `
"test=-1+2+-2+3
foo=[-1,-2+4,(-2)+-4+6]
print(test)
print(foo)"
`;

exports[`parse default scripts negation.src beautify 1`] = `
"test = -1 + 2 + -2 + 3
foo = [
	-1,
	-2 + 4,
	(-2) + -4 + 6,
]

print test
print foo"
`;

exports[`parse default scripts negation.src beautify with custom settings 1`] = `
"test = -1 + 2 + -2 + 3
foo = [
          -1,
          -2 + 4,
          (-2) + -4 + 6,
]

print(test)
print(foo)"
`;

exports[`parse default scripts negation.src uglify 1`] = `
"I=-1+2+-2+3
J=[-1,-2+4,(-2)+-4+6]
print(I)
print(J)"
`;

exports[`parse default scripts obj-init.src 1`] = `
"valueOfIdentifier=\\"foo\\"
myObject={\\"test\\":{\\"another\\":\\"123\\"},\\"value\\":\\"123\\",\\"idtf\\":valueOfIdentifier}
print([myObject.test.another,myObject.value,myObject.idtf])
myList=[{\\"another\\":\\"123\\"},\\"123\\",valueOfIdentifier]
print(myList)"
`;

exports[`parse default scripts obj-init.src beautify 1`] = `
"valueOfIdentifier = \\"foo\\"

myObject = {
	\\"test\\": { \\"another\\": \\"123\\" },
	\\"value\\": \\"123\\",
	\\"idtf\\": valueOfIdentifier,
}

print(
	[
		myObject.test.another,
		myObject.value,
		myObject.idtf,
	])

myList = [
	{ \\"another\\": \\"123\\" },
	\\"123\\",
	valueOfIdentifier,
]

print myList"
`;

exports[`parse default scripts obj-init.src beautify with custom settings 1`] = `
"valueOfIdentifier = \\"foo\\"

myObject = {
          \\"test\\": { \\"another\\": \\"123\\" },
          \\"value\\": \\"123\\",
          \\"idtf\\": valueOfIdentifier,
}

print(
          [
                    myObject.test.another,
                    myObject.value,
                    myObject.idtf,
          ])

myList = [
          { \\"another\\": \\"123\\" },
          \\"123\\",
          valueOfIdentifier,
]

print(myList)"
`;

exports[`parse default scripts obj-init.src uglify 1`] = `
"globals.H=globals
H.P=\\"123\\"
I=\\"foo\\"
J={\\"test\\":{\\"another\\":P},\\"value\\":P,\\"idtf\\":I}
print([J.test.another,J.value,J.idtf])
O=[{\\"another\\":P},P,I]
print(O)"
`;

exports[`parse default scripts optimize.src 1`] = `
"test=function(abc)
print(abc)
end function
superlangername=function(abc)
print(abc)
end function
superlangername3=function(abc)
print(abc)
end function
superlangername4=function(abc)
print(abc)
end function
superlangername5=function(abc)
print(abc)
end function
test(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername4(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername5(\\"xxxxxxxxxx\\")
superlangername3(\\"xxxxxxxxxx\\")"
`;

exports[`parse default scripts optimize.src beautify 1`] = `
"test = function(abc)
	print abc
end function

superlangername = function(abc)
	print abc
end function

superlangername3 = function(abc)
	print abc
end function

superlangername4 = function(abc)
	print abc
end function

superlangername5 = function(abc)
	print abc
end function

test \\"xxxxxxxxxx\\"
superlangername \\"xxxxxxxxxx\\"
superlangername4 \\"xxxxxxxxxx\\"
superlangername \\"xxxxxxxxxx\\"
superlangername5 \\"xxxxxxxxxx\\"
superlangername3 \\"xxxxxxxxxx\\""
`;

exports[`parse default scripts optimize.src beautify with custom settings 1`] = `
"test = function(abc)
          print(abc)
end function

superlangername = function(abc)
          print(abc)
end function

superlangername3 = function(abc)
          print(abc)
end function

superlangername4 = function(abc)
          print(abc)
end function

superlangername5 = function(abc)
          print(abc)
end function

test(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername4(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername5(\\"xxxxxxxxxx\\")
superlangername3(\\"xxxxxxxxxx\\")"
`;

exports[`parse default scripts optimize.src uglify 1`] = `
"globals.H=globals
H.O=\\"xxxxxxxxxx\\"
I=function(N)
print(N)
end function
J=function(N)
print(N)
end function
K=function(N)
print(N)
end function
L=function(N)
print(N)
end function
M=function(N)
print(N)
end function
I(O)
J(O)
L(O)
J(O)
M(O)
K(O)"
`;

exports[`parse default scripts outer.src 1`] = `
"main=function()
num=0
iterate=function()
clear_screen
text=\\"<mark=green><color=black>\\"+outer.num
print(outer.hasIndex(\\"num\\"))
if (outer.num>20) then
text=\\"<mark=yellow><color=green>\\"+outer.num
end if
if (outer.num>40) then
text=\\"<mark=red><color=yellow>\\"+outer.num
end if
if (outer.num<-20) then
text=\\"<mark=green><color=yellow>\\"+outer.num
end if
if (outer.num<-40) then
text=\\"<mark=yellow><color=red>\\"+outer.num
end if
print(text)
key=user_input(\\"test\\",false,true)
if (key==\\"UpArrow\\") then
outer.num=outer.num+(1)
else if (key==\\"DownArrow\\") then
outer.num=outer.num-(1)
else
exit(\\"bye\\")
end if
end function
while (true)
iterate
end while
end function
main"
`;

exports[`parse default scripts outer.src beautify 1`] = `
"main = function
	num = 0
	iterate = function
		clear_screen

		text = \\"<mark=green><color=black>\\" + outer.num

		print outer.hasIndex(\\"num\\")

		if outer.num > 20 then text = \\"<mark=yellow><color=green>\\" + outer.num
		if outer.num > 40 then text = \\"<mark=red><color=yellow>\\" + outer.num
		if outer.num < -20 then text = \\"<mark=green><color=yellow>\\" + outer.num
		if outer.num < -40 then text = \\"<mark=yellow><color=red>\\" + outer.num

		print text
		key = user_input(\\"test\\", false, true)

		if key == \\"UpArrow\\" then
			outer.num = outer.num + (1)
		else if key == \\"DownArrow\\" then
			outer.num = outer.num - (1)
		else
			exit \\"bye\\"
		end if
	end function

	while true
		iterate
	end while
end function

main"
`;

exports[`parse default scripts outer.src beautify with custom settings 1`] = `
"main = function
          num = 0
          iterate = function
                    clear_screen

                    text = \\"<mark=green><color=black>\\" + outer.num

                    print(outer.hasIndex(\\"num\\"))

                    if outer.num > 20 then text = \\"<mark=yellow><color=green>\\" + outer.num
                    if outer.num > 40 then text = \\"<mark=red><color=yellow>\\" + outer.num
                    if outer.num < -20 then text = \\"<mark=green><color=yellow>\\" + outer.num
                    if outer.num < -40 then text = \\"<mark=yellow><color=red>\\" + outer.num

                    print(text)
                    key = user_input(\\"test\\", false, true)

                    if key == \\"UpArrow\\" then
                              outer.num += 1
                    else if key == \\"DownArrow\\" then
                              outer.num -= 1
                    else
                              exit(\\"bye\\")
                    end if
          end function

          while true
                    iterate
          end while
end function

main"
`;

exports[`parse default scripts outer.src uglify 1`] = `
"I=function
J=0
K=function
clear_screen
L=\\"<mark=green><color=black>\\"+outer.J
print(outer.hasIndex(\\"J\\"))
if (outer.J>20) then
L=\\"<mark=yellow><color=green>\\"+outer.J
end if
if (outer.J>40) then
L=\\"<mark=red><color=yellow>\\"+outer.J
end if
if (outer.J<-20) then
L=\\"<mark=green><color=yellow>\\"+outer.J
end if
if (outer.J<-40) then
L=\\"<mark=yellow><color=red>\\"+outer.J
end if
print(L)
M=user_input(\\"test\\",false,true)
if (M==\\"UpArrow\\") then
outer.J=outer.J+(1)
else if (M==\\"DownArrow\\") then
outer.J=outer.J-(1)
else
exit(\\"bye\\")
end if
end function
while (true)
K
end while
end function
I"
`;

exports[`parse default scripts password-generator.src 1`] = `
"PasswordGenerator={}
PasswordGenerator.MAX_PASSWORD_LENGTH=15
PasswordGenerator.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS=\\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC=PasswordGenerator.ALPHABETIC_CHARACTERS+PasswordGenerator.ALPHABETIC_CHARACTERS.upper+PasswordGenerator.NUMBER_CHARACTERS
PasswordGenerator.constructor=function()
me=self
me.buffer=[0]
me.characters=me.ALPHA_NUMERIC
return me
end function
PasswordGenerator.increaseBuffer=function(i)
me=self
currentCharBuffer=me.buffer
maxBufferSize=me.characters.len
if (i==null) then
i=currentCharBuffer.len-1
end if
p=currentCharBuffer[i]
p=p+1
currentCharBuffer[i]=p
if (p==maxBufferSize) then
currentCharBuffer[i]=0
if (i==0) then
currentCharBuffer.push(0)
else
me.increaseBuffer(i-1)
end if
end if
end function
PasswordGenerator.gen=function()
me=self
currentCharBuffer=me.buffer
generatorCharacters=me.characters
password=\\"\\"
index=0
while index<currentCharBuffer.len
pointer=currentCharBuffer[index]
password=password+generatorCharacters[pointer]
if (index==currentCharBuffer.len-1) then
self.increaseBuffer
end if
index=index+1
end while
if (currentCharBuffer.len>me.MAX_PASSWORD_LENGTH) then
return null
end if
return password
end function
pgen=(new PasswordGenerator).constructor
index=0
max=10
result=[]
while (index<max)
result.push(pgen.gen)
index=index+1
end while
print(result)"
`;

exports[`parse default scripts password-generator.src beautify 1`] = `
"PasswordGenerator = {}

PasswordGenerator.MAX_PASSWORD_LENGTH = 15
PasswordGenerator.ALPHABETIC_CHARACTERS = \\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS = \\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC = PasswordGenerator.ALPHABETIC_CHARACTERS + PasswordGenerator.ALPHABETIC_CHARACTERS.upper + PasswordGenerator.NUMBER_CHARACTERS

PasswordGenerator.constructor = function
	me = self
	me.buffer = [ 0 ]
	me.characters = me.ALPHA_NUMERIC
	return me
end function

PasswordGenerator.increaseBuffer = function(i)
	me = self
	currentCharBuffer = me.buffer
	maxBufferSize = me.characters.len
	if i == null then i = currentCharBuffer.len - 1
	p = currentCharBuffer[i]
	p = p + 1
	currentCharBuffer[i] = p
	if p == maxBufferSize then
		currentCharBuffer[i] = 0
		if i == 0 then
			currentCharBuffer.push 0
		else
			me.increaseBuffer i - 1
		end if
	end if
end function

PasswordGenerator.gen = function
	me = self
	currentCharBuffer = me.buffer
	generatorCharacters = me.characters
	password = \\"\\"
	index = 0

	while index < currentCharBuffer.len
		pointer = currentCharBuffer[index]
		password = password + generatorCharacters[pointer]
		if index == currentCharBuffer.len - 1 then self.increaseBuffer
		index = index + 1
	end while

	if currentCharBuffer.len > me.MAX_PASSWORD_LENGTH then
		return null
	end if

	return password
end function

pgen = (new PasswordGenerator).constructor

index = 0
max = 10
result = []

while index < max
	result.push pgen.gen
	index = index + 1
end while

print result"
`;

exports[`parse default scripts password-generator.src beautify with custom settings 1`] = `
"PasswordGenerator = {}

PasswordGenerator.MAX_PASSWORD_LENGTH = 15
PasswordGenerator.ALPHABETIC_CHARACTERS = \\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS = \\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC = PasswordGenerator.ALPHABETIC_CHARACTERS + PasswordGenerator.ALPHABETIC_CHARACTERS.upper + PasswordGenerator.NUMBER_CHARACTERS

PasswordGenerator.constructor = function
          me = self
          me.buffer = [ 0 ]
          me.characters = me.ALPHA_NUMERIC
          return me
end function

PasswordGenerator.increaseBuffer = function(i)
          me = self
          currentCharBuffer = me.buffer
          maxBufferSize = me.characters.len
          if i == null then i = currentCharBuffer.len - 1
          p = currentCharBuffer[i]
          p += 1
          currentCharBuffer[i] = p
          if p == maxBufferSize then
                    currentCharBuffer[i] = 0
                    if i == 0 then
                              currentCharBuffer.push(0)
                    else
                              me.increaseBuffer(i - 1)
                    end if
          end if
end function

PasswordGenerator.gen = function
          me = self
          currentCharBuffer = me.buffer
          generatorCharacters = me.characters
          password = \\"\\"
          index = 0

          while index < currentCharBuffer.len
                    pointer = currentCharBuffer[index]
                    password += generatorCharacters[pointer]
                    if index == currentCharBuffer.len - 1 then self.increaseBuffer
                    index += 1
          end while

          if currentCharBuffer.len > me.MAX_PASSWORD_LENGTH then
                    return null
          end if

          return password
end function

pgen = (new PasswordGenerator).constructor

index = 0
max = 10
result = []

while index < max
          result.push(pgen.gen)
          index += 1
end while

print(result)"
`;

exports[`parse default scripts password-generator.src uglify 1`] = `
"I={}
I.MAX_PASSWORD_LENGTH=15
I.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
I.NUMBER_CHARACTERS=\\"0123456789\\"
I.ALPHA_NUMERIC=I.ALPHABETIC_CHARACTERS+I.ALPHABETIC_CHARACTERS.upper+I.NUMBER_CHARACTERS
I.constructor=function
U=self
U.buffer=[0]
U.characters=U.ALPHA_NUMERIC
return U
end function
I.increaseBuffer=function(X)
U=self
Y=U.buffer
Z=U.characters.len
if (X==null) then
X=Y.len-1
end if
a=Y[X]
a=a+1
Y[X]=a
if (a==Z) then
Y[X]=0
if (X==0) then
Y.push(0)
else
U.increaseBuffer(X-1)
end if
end if
end function
I.gen=function
U=self
Y=U.buffer
b=U.characters
c=\\"\\"
R=0
while R<Y.len
d=Y[R]
c=c+b[d]
if (R==Y.len-1) then
self.increaseBuffer
end if
R=R+1
end while
if (Y.len>U.MAX_PASSWORD_LENGTH) then
return null
end if
return c
end function
Q=(new I).constructor
R=0
S=10
T=[]
while (R<S)
T.push(Q.gen)
R=R+1
end while
print(T)"
`;

exports[`parse default scripts pseudo-crypto.src 1`] = `
"String={}
String.constructor=function(str)
self.str=str
return self
end function
String.parse=function(values)
result=self.str
index=0
maxIndex=values.len
while index<maxIndex
result=result.replace(\\"$\\"+index,values[index])
index=index+1
end while
return (new self).constructor(result)
end function
String.startsWith=function(str)
return self.str.indexOf(str)==0
end function
String.substr=function(startIndex,endIndex)
return (new self).constructor(slice(self.str,startIndex,endIndex))
end function
String.indexOf=function(str)
return self.str.indexOf(str)
end function
String.replace=function(str,newStr)
return (new self).constructor(self.str.replace(str,newStr))
end function
String.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
String.toString=function()
return self.str
end function
String.length=function()
return self.str.len
end function
String.split=function(seperator)
return self.str.split(seperator)
end function
String.trim=function(seperator)
return (new self).constructor(self.str.trim)
end function
Error={}
Error.String=String
Error.constructor=function(message,values)
m=self
m.message=message
if (values!=null) then
m.message=(new m.String).constructor(message).parse(values).toString
end if
return m
end function
Error.throw=function()
exit(\\"<color=#ff0000>\\"+self.message+\\"</color>\\")
end function
Crypto={}
Crypto.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret=\\"test123\\"
Crypto.maxCharCode=55295
Crypto.Error=Error
Crypto.constructor=function(defaultSecret,hashFn,charset)
me=self
me.defaultSecret=defaultSecret
me.table=charset
me.hashFn=@hashFn
if (@hashFn==null) then
me.hashFn=@md5
end if
if charset==null then
me.table=me.defaultCharset
end if
if me.table.len!=64 then
(new me.Error).constructor(\\"Invalid charset $0...\\",[me.table]).throw
end if
return me
end function
Crypto.getHash=function(pw)
me=self
hash=[]
x=me.hashFn(pw)
for char in x
hash.push(char.code)
end for
hash.reverse
return hash
end function
Crypto.encrypt=function(str,pw)
me=self
if (pw==null) then
pw=me.defaultSecret
end if
hash=me.getHash(pw)
hashPointer=0
output=[]
position=0
padding=str.len%3
max=str.len-padding
get=function(v)
if (not me.table.hasIndex(v)) then
(new me.Error).constructor(\\"Invalid index $0...\\",[v]).throw
end if
return me.table[v]
end function
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
LSHIFT=function(a,b)
return bitwise(\\"<<\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while position<max
m=hash[position%hash.len-1]
a=LSHIFT(str[position].code+m,16)
b=LSHIFT(str[position+1].code+m,8)
c=str[position+2].code+m
buffer=a+b+c
output.push(get(AND(RSHIFT(buffer,18),63)))
output.push(get(AND(RSHIFT(buffer,12),63)))
output.push(get(AND(RSHIFT(buffer,6),63)))
output.push(get(AND(buffer,63)))
position=position+3
end while
if (padding==2) then
m=hash[position%hash.len-1]
a=LSHIFT(str[position].code+m,8)
b=str[position+1].code+m
buffer=a+b
output.push(get(RSHIFT(buffer,10)))
output.push(get(AND(RSHIFT(buffer,4),63)))
output.push(get(AND(LSHIFT(buffer,2),63)))
output.push(\\"=\\")
else if (padding==1) then
m=hash[position%hash.len-1]
buffer=str[position].code+m
output.push(get(RSHIFT(buffer,2)))
output.push(get(AND(LSHIFT(buffer,4),63)))
output.push(\\"==\\")
end if
return output.join(\\"\\")
end function
Crypto.decrypt=function(str,pw)
me=self
if (pw==null) then
pw=me.defaultSecret
end if
hash=me.getHash(pw)
hashPointer=0
hashLength=hash.len
output=[]
bitCounter=0
bitStorage=0
position=0
hashPointer=0
max=str.len
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while position<max
buffer=me.table.indexOf(str[position])
currentBit=bitCounter
bitCounter=bitCounter+1
if (currentBit%4) then
bitStorage=bitStorage*64+buffer
else
bitStorage=buffer
end if
if (currentBit%4) then
expectedHashIndex=(floor(hashPointer/3)*3)%hashLength-1
if (not hash.hasIndex(expectedHashIndex)) then
break
end if
m=hash[expectedHashIndex]
operation=AND(-2*bitCounter,6)
operation=RSHIFT(bitStorage,operation)
operation=AND(255,operation)
if (operation!=0) then
charCode=operation-m
if (charCode>me.maxCharCode) then
break
end if
output.push(char(charCode))
end if
hashPointer=hashPointer+1
end if
position=position+1
end while
return output.join(\\"\\")
end function
test=(new Crypto).constructor(\\"test\\")
pwd=\\"abcde\\"
foo=test.encrypt(pwd)
decrypted=test.decrypt(foo)
print(foo)
print(decrypted)"
`;

exports[`parse default scripts pseudo-crypto.src beautify 1`] = `
"String = {}

String.constructor = function(str)
	self.str = str
	return self
end function

String.parse = function(values)
	result = self.str
	index = 0
	maxIndex = values.len

	while index < maxIndex
		result = result.replace(\\"$\\" + index, values[index])
		index = index + 1
	end while

	return (new self).constructor(result)
end function

String.startsWith = function(str)
	return self.str.indexOf(str) == 0
end function

String.substr = function(startIndex, endIndex)
	return (new self).constructor(slice(self.str, startIndex, endIndex))
end function

String.indexOf = function(str)
	return self.str.indexOf(str)
end function

String.replace = function(str, newStr)
	return (new self).constructor(self.str.replace(str, newStr))
end function

String.remove = function(str)
	return (new self).constructor(self.str.remove(str))
end function

String.toString = function
	return self.str
end function

String.length = function
	return self.str.len
end function

String.split = function(seperator)
	return self.str.split(seperator)
end function

String.trim = function(seperator)
	return (new self).constructor(self.str.trim)
end function

Error = {}

Error.String = String

Error.constructor = function(message, values)
	m = self
	m.message = message
	if values != null then
		m.message = (new m.String).constructor(message).parse(values).toString
	end if
	return m
end function

Error.throw = function
	exit \\"<color=#ff0000>\\" + self.message + \\"</color>\\"
end function

Crypto = {}

Crypto.defaultCharset = \\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret = \\"test123\\"
Crypto.maxCharCode = 55295
Crypto.Error = Error

Crypto.constructor = function(defaultSecret, hashFn, charset)
	me = self
	me.defaultSecret = defaultSecret
	me.table = charset
	me.hashFn = @hashFn
	if @hashFn == null then me.hashFn = @md5
	if charset == null then me.table = me.defaultCharset
	if me.table.len != 64 then (new me.Error).constructor(\\"Invalid charset $0...\\", [ me.table ]).throw
	return me
end function

Crypto.getHash = function(pw)
	me = self
	hash = []
	x = me.hashFn(pw)
	for char in x
		hash.push char.code
	end for
	hash.reverse
	return hash
end function

Crypto.encrypt = function(str, pw)
	me = self
	if pw == null then pw = me.defaultSecret
	hash = me.getHash(pw)
	hashPointer = 0
	output = []
	position = 0
	padding = str.len % 3
	max = str.len - padding
	get = function(v)
		if not me.table.hasIndex(v) then
			(new me.Error).constructor(\\"Invalid index $0...\\", [ v ]).throw
		end if
		return me.table[v]
	end function
	AND = function(a, b)
		return bitwise(\\"&\\", a, b)
	end function
	LSHIFT = function(a, b)
		return bitwise(\\"<<\\", a, b)
	end function
	RSHIFT = function(a, b)
		return bitwise(\\">>\\", a, b)
	end function
	while position < max
		m = hash[position % hash.len - 1]
		a = LSHIFT(str[position].code + m, 16)
		b = LSHIFT(str[position + 1].code + m, 8)
		c = str[position + 2].code + m
		buffer = a + b + c
		output.push get(AND(RSHIFT(buffer, 18), 63))
		output.push get(AND(RSHIFT(buffer, 12), 63))
		output.push get(AND(RSHIFT(buffer, 6), 63))
		output.push get(AND(buffer, 63))
		position = position + 3
	end while
	if padding == 2 then
		m = hash[position % hash.len - 1]
		a = LSHIFT(str[position].code + m, 8)
		b = str[position + 1].code + m
		buffer = a + b
		output.push get(RSHIFT(buffer, 10))
		output.push get(AND(RSHIFT(buffer, 4), 63))
		output.push get(AND(LSHIFT(buffer, 2), 63))
		output.push \\"=\\"
	else if padding == 1 then
		m = hash[position % hash.len - 1]
		buffer = str[position].code + m
		output.push get(RSHIFT(buffer, 2))
		output.push get(AND(LSHIFT(buffer, 4), 63))
		output.push \\"==\\"
	end if
	return output.join(\\"\\")
end function

Crypto.decrypt = function(str, pw)
	me = self
	if pw == null then pw = me.defaultSecret
	hash = me.getHash(pw)
	hashPointer = 0
	hashLength = hash.len
	output = []
	bitCounter = 0
	bitStorage = 0
	position = 0
	hashPointer = 0
	max = str.len
	AND = function(a, b)
		return bitwise(\\"&\\", a, b)
	end function
	RSHIFT = function(a, b)
		return bitwise(\\">>\\", a, b)
	end function
	while position < max
		buffer = me.table.indexOf(str[position])
		currentBit = bitCounter
		bitCounter = bitCounter + 1
		if currentBit % 4 then
			bitStorage = bitStorage * 64 + buffer
		else
			bitStorage = buffer
		end if
		if currentBit % 4 then
			expectedHashIndex = (floor(hashPointer / 3) * 3) % hashLength - 1
			if not hash.hasIndex(expectedHashIndex) then break
			m = hash[expectedHashIndex]
			operation = AND(-2 * bitCounter, 6)
			operation = RSHIFT(bitStorage, operation)
			operation = AND(255, operation)
			if operation != 0 then
				charCode = operation - m
				if charCode > me.maxCharCode then break
				output.push char(charCode)
			end if
			hashPointer = hashPointer + 1
		end if
		position = position + 1
	end while
	return output.join(\\"\\")
end function

test = (new Crypto).constructor(\\"test\\")

pwd = \\"abcde\\"

foo = test.encrypt(pwd)
decrypted = test.decrypt(foo)

print foo
print decrypted"
`;

exports[`parse default scripts pseudo-crypto.src beautify with custom settings 1`] = `
"String = {}

String.constructor = function(str)
          self.str = str
          return self
end function

String.parse = function(values)
          result = self.str
          index = 0
          maxIndex = values.len

          while index < maxIndex
                    result = result.replace(\\"$\\" + index, values[index])
                    index += 1
          end while

          return (new self).constructor(result)
end function

String.startsWith = function(str)
          return self.str.indexOf(str) == 0
end function

String.substr = function(startIndex, endIndex)
          return (new self).constructor(slice(self.str, startIndex, endIndex))
end function

String.indexOf = function(str)
          return self.str.indexOf(str)
end function

String.replace = function(str, newStr)
          return (new self).constructor(self.str.replace(str, newStr))
end function

String.remove = function(str)
          return (new self).constructor(self.str.remove(str))
end function

String.toString = function
          return self.str
end function

String.length = function
          return self.str.len
end function

String.split = function(seperator)
          return self.str.split(seperator)
end function

String.trim = function(seperator)
          return (new self).constructor(self.str.trim)
end function

Error = {}

Error.String = String

Error.constructor = function(message, values)
          m = self
          m.message = message
          if values != null then
                    m.message = (new m.String).constructor(message).parse(values).toString
          end if
          return m
end function

Error.throw = function
          exit(\\"<color=#ff0000>\\" + self.message + \\"</color>\\")
end function

Crypto = {}

Crypto.defaultCharset = \\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret = \\"test123\\"
Crypto.maxCharCode = 55295
Crypto.Error = Error

Crypto.constructor = function(defaultSecret, hashFn, charset)
          me = self
          me.defaultSecret = defaultSecret
          me.table = charset
          me.hashFn = @hashFn
          if @hashFn == null then me.hashFn = @md5
          if charset == null then me.table = me.defaultCharset
          if me.table.len != 64 then (new me.Error).constructor(\\"Invalid charset $0...\\", [ me.table ]).throw
          return me
end function

Crypto.getHash = function(pw)
          me = self
          hash = []
          x = me.hashFn(pw)
          for char in x
                    hash.push(char.code)
          end for
          hash.reverse
          return hash
end function

Crypto.encrypt = function(str, pw)
          me = self
          if pw == null then pw = me.defaultSecret
          hash = me.getHash(pw)
          hashPointer = 0
          output = []
          position = 0
          padding = str.len % 3
          max = str.len - padding
          get = function(v)
                    if not me.table.hasIndex(v) then
                              (new me.Error).constructor(\\"Invalid index $0...\\", [ v ]).throw
                    end if
                    return me.table[v]
          end function
          AND = function(a, b)
                    return bitwise(\\"&\\", a, b)
          end function
          LSHIFT = function(a, b)
                    return bitwise(\\"<<\\", a, b)
          end function
          RSHIFT = function(a, b)
                    return bitwise(\\">>\\", a, b)
          end function
          while position < max
                    m = hash[position % hash.len - 1]
                    a = LSHIFT(str[position].code + m, 16)
                    b = LSHIFT(str[position + 1].code + m, 8)
                    c = str[position + 2].code + m
                    buffer = a + b + c
                    output.push(get(AND(RSHIFT(buffer, 18), 63)))
                    output.push(get(AND(RSHIFT(buffer, 12), 63)))
                    output.push(get(AND(RSHIFT(buffer, 6), 63)))
                    output.push(get(AND(buffer, 63)))
                    position += 3
          end while
          if padding == 2 then
                    m = hash[position % hash.len - 1]
                    a = LSHIFT(str[position].code + m, 8)
                    b = str[position + 1].code + m
                    buffer = a + b
                    output.push(get(RSHIFT(buffer, 10)))
                    output.push(get(AND(RSHIFT(buffer, 4), 63)))
                    output.push(get(AND(LSHIFT(buffer, 2), 63)))
                    output.push(\\"=\\")
          else if padding == 1 then
                    m = hash[position % hash.len - 1]
                    buffer = str[position].code + m
                    output.push(get(RSHIFT(buffer, 2)))
                    output.push(get(AND(LSHIFT(buffer, 4), 63)))
                    output.push(\\"==\\")
          end if
          return output.join(\\"\\")
end function

Crypto.decrypt = function(str, pw)
          me = self
          if pw == null then pw = me.defaultSecret
          hash = me.getHash(pw)
          hashPointer = 0
          hashLength = hash.len
          output = []
          bitCounter = 0
          bitStorage = 0
          position = 0
          hashPointer = 0
          max = str.len
          AND = function(a, b)
                    return bitwise(\\"&\\", a, b)
          end function
          RSHIFT = function(a, b)
                    return bitwise(\\">>\\", a, b)
          end function
          while position < max
                    buffer = me.table.indexOf(str[position])
                    currentBit = bitCounter
                    bitCounter += 1
                    if currentBit % 4 then
                              bitStorage = bitStorage * 64 + buffer
                    else
                              bitStorage = buffer
                    end if
                    if currentBit % 4 then
                              expectedHashIndex = (floor(hashPointer / 3) * 3) % hashLength - 1
                              if not hash.hasIndex(expectedHashIndex) then break
                              m = hash[expectedHashIndex]
                              operation = AND(-2 * bitCounter, 6)
                              operation = RSHIFT(bitStorage, operation)
                              operation = AND(255, operation)
                              if operation != 0 then
                                        charCode = operation - m
                                        if charCode > me.maxCharCode then break
                                        output.push(char(charCode))
                              end if
                              hashPointer += 1
                    end if
                    position += 1
          end while
          return output.join(\\"\\")
end function

test = (new Crypto).constructor(\\"test\\")

pwd = \\"abcde\\"

foo = test.encrypt(pwd)
decrypted = test.decrypt(foo)

print(foo)
print(decrypted)"
`;

exports[`parse default scripts pseudo-crypto.src uglify 1`] = `
"globals.H=globals
H.ϻ=1
H.Ϲ=null
H.Ϻ=63
I={}
I.constructor=function(str)
self.str=str
return self
end function
I.parse=function(values)
d=self.str
e=0
f=values.len
while e<f
d=d.replace(\\"$\\"+e,values[e])
e=e+ϻ
end while
return (new self).constructor(d)
end function
I.startsWith=function(str)
return self.str.indexOf(str)==0
end function
I.substr=function(g,h)
return (new self).constructor(slice(self.str,g,h))
end function
I.indexOf=function(str)
return self.str.indexOf(str)
end function
I.replace=function(str,i)
return (new self).constructor(self.str.replace(str,i))
end function
I.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
I.toString=function
return self.str
end function
I.length=function
return self.str.len
end function
I.split=function(j)
return self.str.split(j)
end function
I.trim=function(j)
return (new self).constructor(self.str.trim)
end function
Q={}
Q.String=I
Q.constructor=function(k,values)
l=self
l.message=k
if (values!=Ϲ) then
l.message=(new l.String).constructor(k).parse(values).toString
end if
return l
end function
Q.throw=function
exit(\\"<color=#ff0000>\\"+self.message+\\"</color>\\")
end function
S={}
S.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
S.defaultSecret=\\"test123\\"
S.maxCharCode=55295
S.Error=Q
S.constructor=function(U,m,n)
o=self
o.defaultSecret=U
o.table=n
o.hashFn=@m
if (@m==Ϲ) then
o.hashFn=@md5
end if
if n==Ϲ then
o.table=o.defaultCharset
end if
if o.table.len!=64 then
(new o.Error).constructor(\\"Invalid charset $0...\\",[o.table]).throw
end if
return o
end function
S.getHash=function(q)
o=self
hash=[]
r=o.hashFn(q)
for char in r
hash.push(char.code)
end for
hash.reverse
return hash
end function
S.encrypt=function(str,q)
o=self
if (q==Ϲ) then
q=o.defaultSecret
end if
hash=o.getHash(q)
t=0
u=[]
ϱ=0
w=str.len%3
x=str.len-w
y=function(ϰ)
if (not o.table.hasIndex(ϰ)) then
(new o.Error).constructor(\\"Invalid index $0...\\",[ϰ]).throw
end if
return o.table[ϰ]
end function
z=function(ϩ,ϫ)
return bitwise(\\"&\\",ϩ,ϫ)
end function
_=function(ϩ,ϫ)
return bitwise(\\"<<\\",ϩ,ϫ)
end function
Ϩ=function(ϩ,ϫ)
return bitwise(\\">>\\",ϩ,ϫ)
end function
while ϱ<x
l=hash[ϱ%hash.len-ϻ]
ϩ=_(str[ϱ].code+l,16)
ϫ=_(str[ϱ+ϻ].code+l,8)
ϭ=str[ϱ+2].code+l
ϯ=ϩ+ϫ+ϭ
u.push(y(z(Ϩ(ϯ,18),Ϻ)))
u.push(y(z(Ϩ(ϯ,12),Ϻ)))
u.push(y(z(Ϩ(ϯ,6),Ϻ)))
u.push(y(z(ϯ,Ϻ)))
ϱ=ϱ+3
end while
if (w==2) then
l=hash[ϱ%hash.len-ϻ]
ϩ=_(str[ϱ].code+l,8)
ϫ=str[ϱ+ϻ].code+l
ϯ=ϩ+ϫ
u.push(y(Ϩ(ϯ,10)))
u.push(y(z(Ϩ(ϯ,4),Ϻ)))
u.push(y(z(_(ϯ,2),Ϻ)))
u.push(\\"=\\")
else if (w==ϻ) then
l=hash[ϱ%hash.len-ϻ]
ϯ=str[ϱ].code+l
u.push(y(Ϩ(ϯ,2)))
u.push(y(z(_(ϯ,4),Ϻ)))
u.push(\\"==\\")
end if
return u.join(\\"\\")
end function
S.decrypt=function(str,q)
o=self
if (q==Ϲ) then
q=o.defaultSecret
end if
hash=o.getHash(q)
t=0
ϲ=hash.len
u=[]
ϳ=0
ϴ=0
ϱ=0
t=0
x=str.len
z=function(ϩ,ϫ)
return bitwise(\\"&\\",ϩ,ϫ)
end function
Ϩ=function(ϩ,ϫ)
return bitwise(\\">>\\",ϩ,ϫ)
end function
while ϱ<x
ϯ=o.table.indexOf(str[ϱ])
ϵ=ϳ
ϳ=ϳ+ϻ
if (ϵ%4) then
ϴ=ϴ*64+ϯ
else
ϴ=ϯ
end if
if (ϵ%4) then
϶=(floor(t/3)*3)%ϲ-ϻ
if (not hash.hasIndex(϶)) then
break
end if
l=hash[϶]
Ϸ=z(-2*ϳ,6)
Ϸ=Ϩ(ϴ,Ϸ)
Ϸ=z(255,Ϸ)
if (Ϸ!=0) then
ϸ=Ϸ-l
if (ϸ>o.maxCharCode) then
break
end if
u.push(char(ϸ))
end if
t=t+ϻ
end if
ϱ=ϱ+ϻ
end while
return u.join(\\"\\")
end function
Z=(new S).constructor(\\"test\\")
Ϫ=\\"abcde\\"
Ϭ=Z.encrypt(Ϫ)
Ϯ=Z.decrypt(Ϭ)
print(Ϭ)
print(Ϯ)"
`;

exports[`parse default scripts random.src 1`] = `
"Random={}
Random.pool={}
Random.defaultSeed=\\"random\\"
Random.createPool=function(seed,val)
return {\\"seed\\":seed,\\"value\\":val,\\"generation\\":0}
end function
Random.calcSeed=function(seed)
seedVal=0
pos=seed.len
for char in seed
seedVal=seedVal+char.code+pos
pos=pos-1
end for
return seedVal
end function
Random.gen=function(min,max,seed,inc)
me=self
pool=me.pool
if (inc==null) then
inc=true
end if
if (seed==null) then
seed=me.defaultSeed
end if
if (pool.hasIndex(seed)) then
ps=pool[seed]
if (not inc) then
return ps.value
end if
ps.generation=ps.generation+1
val=floor((rnd(ps.value+ps.generation)*(max-min))+min)
ps.value=val
return val
end if
seedVal=me.calcSeed(seed)
val=floor((rnd(seedVal)*(max-min))+min)
pool[seed]=me.createPool(seedVal,val)
return val
end function
Random.seq=function(min,max,seed,amount,keepPool)
me=self
index=0
result=[]
while index<amount
temp=me.gen(min,max,seed)
result.push(temp)
index=index+1
end while
if (keepPool!=true) then
me.pool.remove(seed)
end if
return result
end function
Random.get=function(min,max)
return self.gen(min,max)
end function
print(Random.get(100,500))
print(Random.seq(100,500,\\"test\\",10))"
`;

exports[`parse default scripts random.src beautify 1`] = `
"Random = {}

Random.pool = {}
Random.defaultSeed = \\"random\\"

Random.createPool = function(seed, val)
	return {
		\\"seed\\": seed,
		\\"value\\": val,
		\\"generation\\": 0,
	}
end function

Random.calcSeed = function(seed)
	seedVal = 0
	pos = seed.len

	for char in seed
		seedVal = seedVal + char.code + pos
		pos = pos - 1
	end for

	return seedVal
end function

Random.gen = function(min, max, seed, inc)
	me = self
	pool = me.pool
	if inc == null then inc = true
	if seed == null then seed = me.defaultSeed
	if pool.hasIndex(seed) then
		ps = pool[seed]
		if not inc then return ps.value
		ps.generation = ps.generation + 1
		val = floor((rnd(ps.value + ps.generation) * (max - min)) + min)
		ps.value = val
		return val
	end if

	seedVal = me.calcSeed(seed)

	val = floor((rnd(seedVal) * (max - min)) + min)
	pool[seed] = me.createPool(seedVal, val)

	return val
end function

Random.seq = function(min, max, seed, amount, keepPool)
	me = self
	index = 0
	result = []
	while index < amount
		temp = me.gen(min, max, seed)
		result.push temp
		index = index + 1
	end while
	if keepPool != true then me.pool.remove(seed)
	return result
end function

Random.get = function(min, max)
	return self.gen(min, max)
end function

print Random.get(100, 500)
print(
	Random.seq(
		100,
		500,
		\\"test\\",
		10))"
`;

exports[`parse default scripts random.src beautify with custom settings 1`] = `
"Random = {}

Random.pool = {}
Random.defaultSeed = \\"random\\"

Random.createPool = function(seed, val)
          return {
                    \\"seed\\": seed,
                    \\"value\\": val,
                    \\"generation\\": 0,
          }
end function

Random.calcSeed = function(seed)
          seedVal = 0
          pos = seed.len

          for char in seed
                    seedVal = seedVal + char.code + pos
                    pos -= 1
          end for

          return seedVal
end function

Random.gen = function(min, max, seed, inc)
          me = self
          pool = me.pool
          if inc == null then inc = true
          if seed == null then seed = me.defaultSeed
          if pool.hasIndex(seed) then
                    ps = pool[seed]
                    if not inc then return ps.value
                    ps.generation += 1
                    val = floor((rnd(ps.value + ps.generation) * (max - min)) + min)
                    ps.value = val
                    return val
          end if

          seedVal = me.calcSeed(seed)

          val = floor((rnd(seedVal) * (max - min)) + min)
          pool[seed] = me.createPool(seedVal, val)

          return val
end function

Random.seq = function(min, max, seed, amount, keepPool)
          me = self
          index = 0
          result = []
          while index < amount
                    temp = me.gen(min, max, seed)
                    result.push(temp)
                    index += 1
          end while
          if keepPool != true then me.pool.remove(seed)
          return result
end function

Random.get = function(min, max)
          return self.gen(min, max)
end function

print(Random.get(100, 500))
print(
          Random.seq(
                    100,
                    500,
                    \\"test\\",
                    10))"
`;

exports[`parse default scripts random.src uglify 1`] = `
"I={}
I.pool={}
I.defaultSeed=\\"random\\"
I.createPool=function(Q,val)
return {\\"seed\\":Q,\\"value\\":val,\\"generation\\":0}
end function
I.calcSeed=function(Q)
R=0
S=Q.len
for char in Q
R=R+char.code+S
S=S-1
end for
return R
end function
I.gen=function(T,U,Q,V)
W=self
J=W.pool
if (V==null) then
V=true
end if
if (Q==null) then
Q=W.defaultSeed
end if
if (J.hasIndex(Q)) then
X=J[Q]
if (not V) then
return X.value
end if
X.generation=X.generation+1
val=floor((rnd(X.value+X.generation)*(U-T))+T)
X.value=val
return val
end if
R=W.calcSeed(Q)
val=floor((rnd(R)*(U-T))+T)
J[Q]=W.createPool(R,val)
return val
end function
I.seq=function(T,U,Q,a,b)
W=self
c=0
d=[]
while c<a
e=W.gen(T,U,Q)
d.push(e)
c=c+1
end while
if (b!=true) then
W.pool.remove(Q)
end if
return d
end function
I.get=function(T,U)
return self.gen(T,U)
end function
print(I.get(100,500))
print(I.seq(100,500,\\"test\\",10))"
`;

exports[`parse default scripts simple-object.src 1`] = `
"test={}
test.here=\\"was\\"
test.was=function()
super.here
print(self.here)
end function
print(test.was)"
`;

exports[`parse default scripts simple-object.src beautify 1`] = `
"test = {}

test.here = \\"was\\"

test.was = function
	super.here
	print self.here
end function

print test.was"
`;

exports[`parse default scripts simple-object.src beautify with custom settings 1`] = `
"test = {}

test.here = \\"was\\"

test.was = function
          super.here
          print(self.here)
end function

print(test.was)"
`;

exports[`parse default scripts simple-object.src uglify 1`] = `
"I={}
I.here=\\"was\\"
I.was=function
super.here
print(self.here)
end function
print(I.was)"
`;

exports[`parse default scripts slice.src 1`] = `
"divideString=function(str,limit)
offset=0
maxLen=str.len
frags=[]
while offset<maxLen
next=offset+limit
frags.push(str[offset:next])
offset=next
end while
return frags
end function
print(divideString(\\"blahhblahhblahhblahhblahhblahhgad\\",5))"
`;

exports[`parse default scripts slice.src beautify 1`] = `
"divideString = function(str, limit)
	offset = 0
	maxLen = str.len
	frags = []

	while offset < maxLen
		next = offset + limit
		frags.push str[offset : next]
		offset = next
	end while

	return frags
end function

print divideString(\\"blahhblahhblahhblahhblahhblahhgad\\", 5)"
`;

exports[`parse default scripts slice.src beautify with custom settings 1`] = `
"divideString = function(str, limit)
          offset = 0
          maxLen = str.len
          frags = []

          while offset < maxLen
                    next = offset + limit
                    frags.push(str[offset : next])
                    offset = next
          end while

          return frags
end function

print(divideString(\\"blahhblahhblahhblahhblahhblahhgad\\", 5))"
`;

exports[`parse default scripts slice.src uglify 1`] = `
"I=function(str,J)
K=0
L=str.len
M=[]
while K<L
N=K+J
M.push(str[K:N])
K=N
end while
return M
end function
print(I(\\"blahhblahhblahhblahhblahhblahhgad\\",5))"
`;

exports[`parse default scripts unary.src 1`] = `
"test=function()
return null
end function
print(@\\"was\\".split and (false or not false))
print(@(\\"was\\".split and (false or not false)))
print(not \\"was\\".split and (false or not false))
print(not (\\"was\\".split and (false or not false)))
print(-1+2)
print(-(1+2))"
`;

exports[`parse default scripts unary.src beautify 1`] = `
"test = function
	return null
end function

print @\\"was\\".split and (false or not false)
print @(\\"was\\".split and (false or not false))
print not \\"was\\".split and (false or not false)
print not (\\"was\\".split and (false or not false))
print -1 + 2
print -(1 + 2)"
`;

exports[`parse default scripts unary.src beautify with custom settings 1`] = `
"test = function
          return null
end function

print(@\\"was\\".split and (false or not false))
print(@(\\"was\\".split and (false or not false)))
print(not \\"was\\".split and (false or not false))
print(not (\\"was\\".split and (false or not false)))
print(-1 + 2)
print(-(1 + 2))"
`;

exports[`parse default scripts unary.src uglify 1`] = `
"globals.H=globals
H.K=\\"was\\"
H.J=false
I=function
return null
end function
print(@K.split and (J or not J))
print(@(K.split and (J or not J)))
print(not K.split and (J or not J))
print(not (K.split and (J or not J)))
print(-1+2)
print(-(1+2))"
`;
