// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse default scripts ascii.src 1`] = `
"AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function(str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if (signs.hasIndex(char)) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors)==\\"string\\") then
r[0]=[\\"<color=#\\"+colors+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors+\\">\\"]+r[2]+[\\"</color>\\"]
else if (typeof(colors)==\\"list\\") then
r[0]=[\\"<color=#\\"+colors[0]+\\">\\"]+r[0]+[\\"</color>\\"]
r[1]=[\\"<color=#\\"+colors[1]+\\">\\"]+r[1]+[\\"</color>\\"]
r[2]=[\\"<color=#\\"+colors[2]+\\">\\"]+r[2]+[\\"</color>\\"]
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))"
`;

exports[`parse default scripts ascii.src beautify 1`] = `
"AsciiGen = {}

map = {}

map.a = [
	\\"||¯|| \\",
	\\"||_|| \\",
	\\"|| || \\",
]
map.b = [
	\\"||¯/ \\",
	\\"|| \\\\ \\",
	\\"||_/ \\",
]
map.c = [
	\\"||¯ \\",
	\\"||  \\",
	\\"||_ \\",
]
map.d = [
	\\"||¯\\\\\\\\ \\",
	\\"|| // \\",
	\\"||//  \\",
]
map.e = [
	\\"||¯ \\",
	\\"||- \\",
	\\"||_ \\",
]
map.f = [
	\\"||¯ \\",
	\\"||_ \\",
	\\"||  \\",
]
map.g = [
	\\"||¯¯  \\",
	\\"|| \\\\\\\\ \\",
	\\"||_|| \\",
]
map.h = [
	\\"|| || \\",
	\\"||-|| \\",
	\\"|| || \\",
]
map.i = [
	\\"|| \\",
	\\"|| \\",
	\\"|| \\",
]
map.j = [
	\\" ¯||¯ \\",
	\\"  ||  \\",
	\\"|_||  \\",
]
map.k = [
	\\"||  / \\",
	\\"|| /  \\",
	\\"||¯\\\\\\\\ \\",
]
map.l = [
	\\"||  \\",
	\\"||  \\",
	\\"||_ \\",
]
map.m = [
	\\"||\\\\\\\\/|| \\",
	\\"||   || \\",
	\\"||   || \\",
]
map.n = [
	\\"||\\\\\\\\ || \\",
	\\"|| \\\\\\\\|| \\",
	\\"||  \\\\|| \\",
]
map.o = [
	\\"||¯|| \\",
	\\"|| || \\",
	\\"||_|| \\",
]
map.p = [
	\\"||¯|| \\",
	\\"||_|| \\",
	\\"||    \\",
]
map.q = [
	\\"||¯||  \\",
	\\"|| ||  \\",
	\\"||_||¬ \\",
]
map.r = [
	\\"||¯|| \\",
	\\"||¯\\\\\\\\ \\",
	\\"|| || \\",
]
map.s = [
	\\"||¯¯ \\",
	\\" \\\\\\\\  \\",
	\\"__|| \\",
]
map.t = [
	\\"¯||¯ \\",
	\\" ||  \\",
	\\" ||  \\",
]
map.u = [
	\\"|| || \\",
	\\"|| || \\",
	\\"||_|| \\",
]
map.v = [
	\\"\\\\\\\\ || \\",
	\\" \\\\\\\\|| \\",
	\\"  \\\\\\\\| \\",
]
map.w = [
	\\"\\\\\\\\ |\\\\\\\\ | \\",
	\\" \\\\\\\\| \\\\\\\\| \\",
	\\"  \\\\\\\\  \\\\\\\\ \\",
]
map.x = [
	\\"\\\\\\\\  / \\",
	\\" \\\\\\\\/  \\",
	\\" //\\\\  \\",
]
map.y = [
	\\"\\\\\\\\  // \\",
	\\" \\\\\\\\//  \\",
	\\"  ||   \\",
]
map.z = [
	\\"¯// \\",
	\\"//  \\",
	\\"||_ \\",
]
map[\\"0\\"] = [
	\\"||¯|| \\",
	\\"||x|| \\",
	\\"||_|| \\",
]
map[\\"1\\"] = [
	\\"'|| \\",
	\\" || \\",
	\\" || \\",
]
map[\\"2\\"] = [
	\\"¯¯|| \\",
	\\"||¯  \\",
	\\"||_  \\",
]
map[\\"3\\"] = [
	\\"¯|| \\",
	\\"-|| \\",
	\\"_|| \\",
]
map[\\"4\\"] = [
	\\" /|| \\",
	\\"/_|| \\",
	\\"  || \\",
]
map[\\"5\\"] = [
	\\"||¯¯ \\",
	\\" ¯|| \\",
	\\" _|| \\",
]
map[\\"6\\"] = [
	\\"||¯¯  \\",
	\\"||¯|| \\",
	\\"||_|| \\",
]
map[\\"7\\"] = [
	\\"¯¯// \\",
	\\" //  \\",
	\\"//   \\",
]
map[\\"8\\"] = [
	\\"||¯|| \\",
	\\"||-|| \\",
	\\"||_|| \\",
]
map[\\"9\\"] = [
	\\"||¯|| \\",
	\\"  ¯|| \\",
	\\"  //  \\",
]
map[\\" \\"] = [
	\\"  \\",
	\\"  \\",
	\\"  \\",
]

AsciiGen.MAP = map

AsciiGen.gen = function(str, colors)
	r = [
		[],
		[],
		[],
	]
	signs = self.MAP

	for char in str
		char = char.lower
		if signs.hasIndex(char) then
			r[0].push signs[char][0]
			r[1].push signs[char][1]
			r[2].push signs[char][2]
		end if
	end for

	if typeof(colors) == \\"string\\" then
		r[0] = [ \\"<color=#\\" + colors + \\">\\" ] + r[0] + [ \\"</color>\\" ]
		r[1] = [ \\"<color=#\\" + colors + \\">\\" ] + r[1] + [ \\"</color>\\" ]
		r[2] = [ \\"<color=#\\" + colors + \\">\\" ] + r[2] + [ \\"</color>\\" ]
	else if typeof(colors) == \\"list\\" then
		r[0] = [ \\"<color=#\\" + colors[0] + \\">\\" ] + r[0] + [ \\"</color>\\" ]
		r[1] = [ \\"<color=#\\" + colors[1] + \\">\\" ] + r[1] + [ \\"</color>\\" ]
		r[2] = [ \\"<color=#\\" + colors[2] + \\">\\" ] + r[2] + [ \\"</color>\\" ]
	end if

	return [
		r[0].join(\\"\\"),
		r[1].join(\\"\\"),
		r[2].join(\\"\\"),
	].join(\\"\\\\n\\")
end function

print AsciiGen.gen(\\"Hallo\\")"
`;

exports[`parse default scripts ascii.src beautify with custom settings 1`] = `
"AsciiGen = {}

map = {}

map.a = [
          \\"||¯|| \\",
          \\"||_|| \\",
          \\"|| || \\",
]
map.b = [
          \\"||¯/ \\",
          \\"|| \\\\ \\",
          \\"||_/ \\",
]
map.c = [
          \\"||¯ \\",
          \\"||  \\",
          \\"||_ \\",
]
map.d = [
          \\"||¯\\\\\\\\ \\",
          \\"|| // \\",
          \\"||//  \\",
]
map.e = [
          \\"||¯ \\",
          \\"||- \\",
          \\"||_ \\",
]
map.f = [
          \\"||¯ \\",
          \\"||_ \\",
          \\"||  \\",
]
map.g = [
          \\"||¯¯  \\",
          \\"|| \\\\\\\\ \\",
          \\"||_|| \\",
]
map.h = [
          \\"|| || \\",
          \\"||-|| \\",
          \\"|| || \\",
]
map.i = [
          \\"|| \\",
          \\"|| \\",
          \\"|| \\",
]
map.j = [
          \\" ¯||¯ \\",
          \\"  ||  \\",
          \\"|_||  \\",
]
map.k = [
          \\"||  / \\",
          \\"|| /  \\",
          \\"||¯\\\\\\\\ \\",
]
map.l = [
          \\"||  \\",
          \\"||  \\",
          \\"||_ \\",
]
map.m = [
          \\"||\\\\\\\\/|| \\",
          \\"||   || \\",
          \\"||   || \\",
]
map.n = [
          \\"||\\\\\\\\ || \\",
          \\"|| \\\\\\\\|| \\",
          \\"||  \\\\|| \\",
]
map.o = [
          \\"||¯|| \\",
          \\"|| || \\",
          \\"||_|| \\",
]
map.p = [
          \\"||¯|| \\",
          \\"||_|| \\",
          \\"||    \\",
]
map.q = [
          \\"||¯||  \\",
          \\"|| ||  \\",
          \\"||_||¬ \\",
]
map.r = [
          \\"||¯|| \\",
          \\"||¯\\\\\\\\ \\",
          \\"|| || \\",
]
map.s = [
          \\"||¯¯ \\",
          \\" \\\\\\\\  \\",
          \\"__|| \\",
]
map.t = [
          \\"¯||¯ \\",
          \\" ||  \\",
          \\" ||  \\",
]
map.u = [
          \\"|| || \\",
          \\"|| || \\",
          \\"||_|| \\",
]
map.v = [
          \\"\\\\\\\\ || \\",
          \\" \\\\\\\\|| \\",
          \\"  \\\\\\\\| \\",
]
map.w = [
          \\"\\\\\\\\ |\\\\\\\\ | \\",
          \\" \\\\\\\\| \\\\\\\\| \\",
          \\"  \\\\\\\\  \\\\\\\\ \\",
]
map.x = [
          \\"\\\\\\\\  / \\",
          \\" \\\\\\\\/  \\",
          \\" //\\\\  \\",
]
map.y = [
          \\"\\\\\\\\  // \\",
          \\" \\\\\\\\//  \\",
          \\"  ||   \\",
]
map.z = [
          \\"¯// \\",
          \\"//  \\",
          \\"||_ \\",
]
map[\\"0\\"] = [
          \\"||¯|| \\",
          \\"||x|| \\",
          \\"||_|| \\",
]
map[\\"1\\"] = [
          \\"'|| \\",
          \\" || \\",
          \\" || \\",
]
map[\\"2\\"] = [
          \\"¯¯|| \\",
          \\"||¯  \\",
          \\"||_  \\",
]
map[\\"3\\"] = [
          \\"¯|| \\",
          \\"-|| \\",
          \\"_|| \\",
]
map[\\"4\\"] = [
          \\" /|| \\",
          \\"/_|| \\",
          \\"  || \\",
]
map[\\"5\\"] = [
          \\"||¯¯ \\",
          \\" ¯|| \\",
          \\" _|| \\",
]
map[\\"6\\"] = [
          \\"||¯¯  \\",
          \\"||¯|| \\",
          \\"||_|| \\",
]
map[\\"7\\"] = [
          \\"¯¯// \\",
          \\" //  \\",
          \\"//   \\",
]
map[\\"8\\"] = [
          \\"||¯|| \\",
          \\"||-|| \\",
          \\"||_|| \\",
]
map[\\"9\\"] = [
          \\"||¯|| \\",
          \\"  ¯|| \\",
          \\"  //  \\",
]
map[\\" \\"] = [
          \\"  \\",
          \\"  \\",
          \\"  \\",
]

AsciiGen.MAP = map

AsciiGen.gen = function(str, colors)
          r = [
                    [],
                    [],
                    [],
          ]
          signs = self.MAP

          for char in str
                    char = char.lower
                    if signs.hasIndex(char) then
                              r[0].push(signs[char][0])
                              r[1].push(signs[char][1])
                              r[2].push(signs[char][2])
                    end if
          end for

          if typeof(colors) == \\"string\\" then
                    r[0] = [ \\"<color=#\\" + colors + \\">\\" ] + r[0] + [ \\"</color>\\" ]
                    r[1] = [ \\"<color=#\\" + colors + \\">\\" ] + r[1] + [ \\"</color>\\" ]
                    r[2] = [ \\"<color=#\\" + colors + \\">\\" ] + r[2] + [ \\"</color>\\" ]
          else if typeof(colors) == \\"list\\" then
                    r[0] = [ \\"<color=#\\" + colors[0] + \\">\\" ] + r[0] + [ \\"</color>\\" ]
                    r[1] = [ \\"<color=#\\" + colors[1] + \\">\\" ] + r[1] + [ \\"</color>\\" ]
                    r[2] = [ \\"<color=#\\" + colors[2] + \\">\\" ] + r[2] + [ \\"</color>\\" ]
          end if

          return [
                    r[0].join(\\"\\"),
                    r[1].join(\\"\\"),
                    r[2].join(\\"\\"),
          ].join(\\"\\\\n\\")
end function

print(AsciiGen.gen(\\"Hallo\\"))"
`;

exports[`parse default scripts ascii.src uglify 1`] = `
"globals.I=globals
I.ϻ=\\"||¯|| \\"
I.Ϻ=\\"||_|| \\"
I.Ϸ=\\"|| || \\"
I.ϵ=\\"||¯ \\"
I.Ϲ=\\"||  \\"
I.϶=\\"||_ \\"
I.ϼ=\\"||¯\\\\\\\\ \\"
I.ϸ=\\"|| \\"
I.Ͻ=\\"  \\"
I.Ͼ=\\"<color=#\\"
I.Ѐ=\\">\\"
I.Ͽ=\\"</color>\\"
J={}
map={}
map.a=[ϻ,Ϻ,Ϸ]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[ϵ,Ϲ,϶]
map.d=[ϼ,\\"|| // \\",\\"||//  \\"]
map.e=[ϵ,\\"||- \\",϶]
map.f=[ϵ,϶,Ϲ]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",Ϻ]
map.h=[Ϸ,\\"||-|| \\",Ϸ]
map.i=[ϸ,ϸ,ϸ]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",ϼ]
map.l=[Ϲ,Ϲ,϶]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[ϻ,Ϸ,Ϻ]
map.p=[ϻ,Ϻ,\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[ϻ,ϼ,Ϸ]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[Ϸ,Ϸ,Ϻ]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",϶]
map[\\"0\\"]=[ϻ,\\"||x|| \\",Ϻ]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",ϻ,Ϻ]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[ϻ,\\"||-|| \\",Ϻ]
map[\\"9\\"]=[ϻ,\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[Ͻ,Ͻ,Ͻ]
J.MAP=map
J.gen=function(str,ϳ)
Ϩ=[[],[],[]]
ϴ=self.MAP
for char in str
char=char.lower
if (ϴ.hasIndex(char)) then
Ϩ[0].push(ϴ[char][0])
Ϩ[1].push(ϴ[char][1])
Ϩ[2].push(ϴ[char][2])
end if
end for
if (typeof(ϳ)==\\"string\\") then
Ϩ[0]=[Ͼ+ϳ+Ѐ]+Ϩ[0]+[Ͽ]
Ϩ[1]=[Ͼ+ϳ+Ѐ]+Ϩ[1]+[Ͽ]
Ϩ[2]=[Ͼ+ϳ+Ѐ]+Ϩ[2]+[Ͽ]
else if (typeof(ϳ)==\\"list\\") then
Ϩ[0]=[Ͼ+ϳ[0]+Ѐ]+Ϩ[0]+[Ͽ]
Ϩ[1]=[Ͼ+ϳ[1]+Ѐ]+Ϩ[1]+[Ͽ]
Ϩ[2]=[Ͼ+ϳ[2]+Ѐ]+Ϩ[2]+[Ͽ]
end if
return [Ϩ[0].join(\\"\\"),Ϩ[1].join(\\"\\"),Ϩ[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(J.gen(\\"Hallo\\"))"
`;

exports[`parse default scripts beautify-cases.src 1`] = `
"test=1+2+3+4+5+6 and (2+3+4+5+6+(2+3+4+5+6+7))
printAlign(\\"dieFace[1] - dieFace[6]\\",[dieFace[1],dieFace[2],dieFace[3],dieFace[4],dieFace[5],dieFace[6],{\\"foo\\":123,\\"was\\":\\"wo\\"}].join,123,123)
printAlign(1,2,3,4)
test={}
test={\\"was\\":123}
test={\\"foo\\":123,\\"was\\":[\\"abc\\",1,234],\\"xx\\":{\\"foo\\":123,\\"ooo\\":{\\"foo\\":123,\\"was\\":\\"wo\\"},\\"was\\":\\"wo\\"},\\"123\\":\\"3\\"}
test=[]
test=[\\"was\\"]
test=[\\"abc\\",1,[\\"abc\\",1,234],[\\"abc\\",[\\"abc\\",1,234],1,234],234]
test=test+5
test=test+4+5
test.abc=test.abc+5
test.abc=test.abc+4+5
if (1) then print(\\"test\\")
if (1) then print(\\"test\\") else print(\\"xd\\")
if (1) then test=[1,2,3,4,5]
if (1) then test=[1,2,3,4,5] else test=[5,4,3,2,1]
if (1) then
print(\\"test\\")
else
print(\\"xd\\")
end if
if (1) then
print(\\"test\\")
else if (0) then
print(\\"xa\\")
else
print(\\"xd\\")
end if
test=function
return [1,2,3,4,5]
end function
test=test+5
test=[1,2,3,4]
test=function
return 123
end function
for test in [123]
print(\\"test\\")
end for
test={\\"was\\":123}
test={\\"was\\":123,\\"foo\\":13,\\"bar\\":45}
while 1
if 1 then print(\\"test\\") else print(\\"xd\\")
end while
if 1 then stacktrace=function
print(\\"test\\")
end function
if 0 then stacktrace=function
print(\\"abc\\")
end function
print(\\"abc\\">[42])
test[25]
test[25]
test[123][25]
test[25](11)
test(11)[25]
while 1
end while
if x.remove(@key) then return \\"foo:\\"+@key+\\"!\\"
foo.bar=function(key=0,val=0,nil=0,nul=0)
if 1 then return function
print(\\"test\\")
end function
end function
test=function
end function
if test==null then
print(\\"foo\\")
else if test==null then
print(\\"bar\\")
else
print(\\"nil\\")
end if
IV=IV+([floor(rnd(byte)*256)])
IV=IV+({\\"was\\":floor(rnd(byte))})"
`;

exports[`parse default scripts beautify-cases.src beautify 1`] = `
"// binary + logical
test = 1 + 2 + 3 + 4 + 5 + 6 and 
	(2 + 3 + 4 + 5 + 6 + (2 + 3 + 4 + 5 + 6 + 7))

// call expression
printAlign(
	\\"dieFace[1] - dieFace[6]\\",
	[
		dieFace[1],
		dieFace[2],
		dieFace[3],
		dieFace[4],
		dieFace[5],
		dieFace[6],
		{
			\\"foo\\": 123,
			\\"was\\": \\"wo\\",
		},
	].join,
	123,
	123)
printAlign(
	1,
	2,
	3,
	4)

// object
test = {}
test = { \\"was\\": 123 }
test = {
	\\"foo\\": 123,
	\\"was\\": [
		\\"abc\\",
		1,
		234,
	],
	\\"xx\\": {
		\\"foo\\": 123,
		\\"ooo\\": {
			\\"foo\\": 123,
			\\"was\\": \\"wo\\",
		},
		\\"was\\": \\"wo\\",
	},
	\\"123\\": \\"3\\",
}

// list
test = []
test = [ \\"was\\" ]
test = [
	\\"abc\\",
	1,
	[
		\\"abc\\",
		1,
		234,
	],
	[
		\\"abc\\",
		[
			\\"abc\\",
			1,
			234,
		],
		1,
		234,
	],
	234,
]

// shorthand binary
test = test + 5
test = test + 4 + 5
test.abc = test.abc + 5
test.abc = test.abc + 4 + 5

// if
if true then print(\\"test\\")
if true then print(\\"test\\") else print(\\"xd\\")
if true then test = [
	1,
	2,
	3,
	4,
	5,
]
if true then test = [
	1,
	2,
	3,
	4,
	5,
] else test = [
	5,
	4,
	3,
	2,
	1,
]
if true then
	print \\"test\\"
else
	print \\"xd\\"
end if
if true then
	print \\"test\\"
else if false then
	print \\"xa\\"
else
	print \\"xd\\"
end if

test = function
	return [
		1,
		2,
		3,
		4,
		5,
	]
end function


// comments
test = test + 5 // test
test = [ // :D
	1,
	2,
	3, // its a list
	4,
]
test = function // its a function
	return 123 // it a return
end function // its function end
for test in [ 123 ] // my for loop
	print \\"test\\" // some print
end for // end for loop

test = { \\"was\\": 123 } // was
test = {

	\\"was\\": 123, // was
	\\"foo\\": 13,
	\\"bar\\": 45,
}

// while block with shorthand if else
while true
	if true then print(\\"test\\") else print(\\"xd\\")
end while


if true then stacktrace = function
	print \\"test\\"
end function
if false then stacktrace = function
	print \\"abc\\"
end function

print \\"abc\\" > [ 42 ] // foo

test[25] // foo
test[25] // bar
test[123][25] // foo
test[25] 11 // bar
test(11)[25] // foo

while true // bar
end while

if x.remove(@key) then return \\"foo:\\" + @key + \\"!\\" // foo

foo.bar = function(key = 0, val = 0, nil = 0, nul = 0)
	if true then return function // bar
		print \\"test\\"
	end function
end function

test = function
end function

if test == null then // foo
	print \\"foo\\"
else if test == null then // bar
	print \\"bar\\"
else // nil
	print \\"nil\\"
end if

IV = IV + ([ floor(rnd(byte) * 256) ]) // Warning: rnd is not cryptographically secure
IV = IV + ({ \\"was\\": floor(rnd(byte)) }) // Warning: rnd is not cryptographically secure"
`;

exports[`parse default scripts beautify-cases.src beautify with custom settings 1`] = `
"// binary + logical
test = 1 + 2 + 3 + 4 + 5 + 6 and 
          (2 + 3 + 4 + 5 + 6 + (2 + 3 + 4 + 5 + 6 + 7))

// call expression
printAlign(
          \\"dieFace[1] - dieFace[6]\\",
          [
                    dieFace[1],
                    dieFace[2],
                    dieFace[3],
                    dieFace[4],
                    dieFace[5],
                    dieFace[6],
                    {
                              \\"foo\\": 123,
                              \\"was\\": \\"wo\\",
                    },
          ].join,
          123,
          123)
printAlign(
          1,
          2,
          3,
          4)

// object
test = {}
test = { \\"was\\": 123 }
test = {
          \\"foo\\": 123,
          \\"was\\": [
                    \\"abc\\",
                    1,
                    234,
          ],
          \\"xx\\": {
                    \\"foo\\": 123,
                    \\"ooo\\": {
                              \\"foo\\": 123,
                              \\"was\\": \\"wo\\",
                    },
                    \\"was\\": \\"wo\\",
          },
          \\"123\\": \\"3\\",
}

// list
test = []
test = [ \\"was\\" ]
test = [
          \\"abc\\",
          1,
          [
                    \\"abc\\",
                    1,
                    234,
          ],
          [
                    \\"abc\\",
                    [
                              \\"abc\\",
                              1,
                              234,
                    ],
                    1,
                    234,
          ],
          234,
]

// shorthand binary
test += 5
test = test + 4 + 5
test.abc += 5
test.abc = test.abc + 4 + 5

// if
if true then print(\\"test\\")
if true then print(\\"test\\") else print(\\"xd\\")
if true then test = [
          1,
          2,
          3,
          4,
          5,
]
if true then test = [
          1,
          2,
          3,
          4,
          5,
] else test = [
          5,
          4,
          3,
          2,
          1,
]
if true then
          print(\\"test\\")
else
          print(\\"xd\\")
end if
if true then
          print(\\"test\\")
else if false then
          print(\\"xa\\")
else
          print(\\"xd\\")
end if

test = function
          return [
                    1,
                    2,
                    3,
                    4,
                    5,
          ]
end function


// comments
test += 5 // test
test = [ // :D
          1,
          2,
          3, // its a list
          4,
]
test = function // its a function
          return 123 // it a return
end function // its function end
for test in [ 123 ] // my for loop
          print(\\"test\\") // some print
end for // end for loop

test = { \\"was\\": 123 } // was
test = {

          \\"was\\": 123, // was
          \\"foo\\": 13,
          \\"bar\\": 45,
}

// while block with shorthand if else
while true
          if true then print(\\"test\\") else print(\\"xd\\")
end while


if true then stacktrace = function
          print(\\"test\\")
end function
if false then stacktrace = function
          print(\\"abc\\")
end function

print(\\"abc\\" > [ 42 ]) // foo

test[25] // foo
test[25] // bar
test[123][25] // foo
test[25](11) // bar
test(11)[25] // foo

while true // bar
end while

if x.remove(@key) then return \\"foo:\\" + @key + \\"!\\" // foo

foo.bar = function(key = 0, val = 0, nil = 0, nul = 0)
          if true then return function // bar
                    print(\\"test\\")
          end function
end function

test = function
end function

if test == null then // foo
          print(\\"foo\\")
else if test == null then // bar
          print(\\"bar\\")
else // nil
          print(\\"nil\\")
end if

IV += [ floor(rnd(byte) * 256) ] // Warning: rnd is not cryptographically secure
IV += { \\"was\\": floor(rnd(byte)) } // Warning: rnd is not cryptographically secure"
`;

exports[`parse default scripts beautify-cases.src uglify 1`] = `
"globals.I=globals
I.Y=\\"foo\\"
I.W=123
I.X=\\"was\\"
I.Z=\\"wo\\"
I.a=\\"abc\\"
I.b=234
I.c=\\"test\\"
I.d=\\"xd\\"
J=1+2+3+4+5+6 and (2+3+4+5+6+(2+3+4+5+6+7))
K(\\"dieFace[1] - dieFace[6]\\",[L[1],L[2],L[3],L[4],L[5],L[6],{Y:W,X:Z}].join,W,W)
K(1,2,3,4)
J={}
J={X:W}
J={Y:W,X:[a,1,b],\\"xx\\":{Y:W,\\"ooo\\":{Y:W,X:Z},X:Z},\\"123\\":\\"3\\"}
J=[]
J=[X]
J=[a,1,[a,1,b],[a,[a,1,b],1,b],b]
J=J+5
J=J+4+5
J.abc=J.abc+5
J.abc=J.abc+4+5
if (1) then print(c)
if (1) then print(c) else print(d)
if (1) then J=[1,2,3,4,5]
if (1) then J=[1,2,3,4,5] else J=[5,4,3,2,1]
if (1) then
print(c)
else
print(d)
end if
if (1) then
print(c)
else if (0) then
print(\\"xa\\")
else
print(d)
end if
J=function
return [1,2,3,4,5]
end function
J=J+5
J=[1,2,3,4]
J=function
return W
end function
for J in [W]
print(c)
end for
J={X:W}
J={X:W,Y:13,\\"bar\\":45}
while 1
if 1 then print(c) else print(d)
end while
if 1 then N=function
print(c)
end function
if 0 then N=function
print(a)
end function
print(a>[42])
J[25]
J[25]
J[W][25]
J[25](11)
J(11)[25]
while 1
end while
if O.remove(@P) then return \\"foo:\\"+@P+\\"!\\"
Q.bar=function(P=0,val=0,U=0,V=0)
if 1 then return function
print(c)
end function
end function
J=function
end function
if J==null then
print(Y)
else if J==null then
print(\\"bar\\")
else
print(\\"nil\\")
end if
S=S+([floor(rnd(T)*256)])
S=S+({X:floor(rnd(T))})"
`;

exports[`parse default scripts binary-expressions.src 1`] = `
"a=a/(b)
a=a*(b)
a=a-(b)
a=a+(b)
bitwise(\\"<<\\",a,b)
bitwise(\\">>\\",a,b)
w=bitwise(\\">>\\",bitwise(\\">>>\\",a,(bitwise(\\"<<\\",b,c))),a)
bitwise(\\"|\\",a,b)
bitwise(\\"&\\",a,b)
a^b
a and b
a or b"
`;

exports[`parse default scripts binary-expressions.src beautify 1`] = `
"a = a / (b)
a = a * (b)
a = a - (b)
a = a + (b)
bitwise(\\"<<\\", a, b)
bitwise(\\">>\\", a, b)
w = bitwise(\\">>\\", bitwise(\\">>>\\", a, (bitwise(\\"<<\\", b, c))), a)
bitwise(\\"|\\", a, b)
bitwise(\\"&\\", a, b)
a ^ b
a and b
a or b"
`;

exports[`parse default scripts binary-expressions.src beautify with custom settings 1`] = `
"a /= b
a *= b
a -= b
a += b
bitwise(\\"<<\\", a, b)
bitwise(\\">>\\", a, b)
w = bitwise(\\">>\\", bitwise(\\">>>\\", a, (bitwise(\\"<<\\", b, c))), a)
bitwise(\\"|\\", a, b)
bitwise(\\"&\\", a, b)
a ^ b
a and b
a or b"
`;

exports[`parse default scripts binary-expressions.src uglify 1`] = `
"globals.I=globals
J=J/(K)
J=J*(K)
J=J-(K)
J=J+(K)
bitwise(\\"<<\\",J,K)
bitwise(\\">>\\",J,K)
L=bitwise(\\">>\\",bitwise(\\">>>\\",J,(bitwise(\\"<<\\",K,M))),J)
bitwise(\\"|\\",J,K)
bitwise(\\"&\\",J,K)
J^K
J and K
J or K"
`;

exports[`parse default scripts comments.src 1`] = `
"myVariable
test=2"
`;

exports[`parse default scripts comments.src beautify 1`] = `
"// comment
myVariable // comment2
test = 2 // comment3"
`;

exports[`parse default scripts comments.src beautify with custom settings 1`] = `
"// comment
myVariable // comment2
test = 2 // comment3"
`;

exports[`parse default scripts comments.src uglify 1`] = `
"globals.I=globals
J
K=2"
`;

exports[`parse default scripts default-args.src 1`] = `
"test=function(arg1=0,arg2=\\"test\\")
print(arg1)
print(arg2)
end function
test
test(\\"foo\\",0)
var1=\\"test\\"
var2=\\"test\\"
var3=\\"test\\""
`;

exports[`parse default scripts default-args.src beautify 1`] = `
"test = function(arg1 = 0, arg2 = \\"test\\")
	print arg1
	print arg2
end function

test
test \\"foo\\", false

var1 = \\"test\\"
var2 = \\"test\\"
var3 = \\"test\\""
`;

exports[`parse default scripts default-args.src beautify with custom settings 1`] = `
"test = function(arg1 = 0, arg2 = \\"test\\")
          print(arg1)
          print(arg2)
end function

test
test(\\"foo\\", false)

var1 = \\"test\\"
var2 = \\"test\\"
var3 = \\"test\\""
`;

exports[`parse default scripts default-args.src uglify 1`] = `
"globals.I=globals
I.P=\\"test\\"
J=function(N=0,O=\\"test\\")
print(N)
print(O)
end function
J
J(\\"foo\\",0)
K=P
L=P
M=P"
`;

exports[`parse default scripts envar.src 1`] = `
"#include \\"../fixtures/envar-include.src\\";
myvar=\\"\\"foo\\"\\"
print(\\"0.2\\")"
`;

exports[`parse default scripts envar.src beautify 1`] = `
"#include \\"../fixtures/envar-include.src\\";

myvar = \\"\\"foo\\"\\"
print \\"0.2\\""
`;

exports[`parse default scripts envar.src beautify with custom settings 1`] = `
"#include \\"../fixtures/envar-include.src\\";

myvar = #envar test
print(#envar test2)"
`;

exports[`parse default scripts envar.src uglify 1`] = `
"globals.I=globals
#include \\"../fixtures/envar-include.src\\";
J=\\"\\"foo\\"\\"
print(\\"0.2\\")"
`;

exports[`parse default scripts for-iteration.src 1`] = `
"myVariable=[1,2,3,4]
for longVariable in myVariable
print(__longVariable_idx)
end for
for longVariable in myVariable
for longVariable in myVariable
print(__longVariable_idx)
end for
print(__longVariable_idx)
end for"
`;

exports[`parse default scripts for-iteration.src beautify 1`] = `
"myVariable = [
	1,
	2,
	3,
	4,
]

for longVariable in myVariable
	print __longVariable_idx
end for


for longVariable in myVariable
	for longVariable in myVariable
		print __longVariable_idx
	end for
	print __longVariable_idx
end for"
`;

exports[`parse default scripts for-iteration.src beautify with custom settings 1`] = `
"myVariable = [
          1,
          2,
          3,
          4,
]

for longVariable in myVariable
          print(__longVariable_idx)
end for


for longVariable in myVariable
          for longVariable in myVariable
                    print(__longVariable_idx)
          end for
          print(__longVariable_idx)
end for"
`;

exports[`parse default scripts for-iteration.src uglify 1`] = `
"globals.I=globals
J=[1,2,3,4]
for K in J
print(__K_idx)
end for
for K in J
for K in J
print(__K_idx)
end for
print(__K_idx)
end for"
`;

exports[`parse default scripts greybel-utils.src 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger
print(7)
print(\\"unknown\\")
print(#inject \\"../fixtures/inject.src\\";)"
`;

exports[`parse default scripts greybel-utils.src beautify 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger

print 7
print \\"unknown\\"

print #inject \\"../fixtures/inject.src\\";"
`;

exports[`parse default scripts greybel-utils.src beautify with custom settings 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
#envar TEST_ENV
debugger

print(#line)
print(#filename)

print(#inject \\"../fixtures/inject.src\\";)"
`;

exports[`parse default scripts greybel-utils.src uglify 1`] = `
"globals.I=globals
#import J from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger
print(7)
print(\\"unknown\\")
print(#inject \\"../fixtures/inject.src\\";)"
`;

exports[`parse default scripts greybel-utils-with-comments.src 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger"
`;

exports[`parse default scripts greybel-utils-with-comments.src beautify 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger"
`;

exports[`parse default scripts greybel-utils-with-comments.src beautify with custom settings 1`] = `
"#import foo from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
#envar TEST_ENV
debugger"
`;

exports[`parse default scripts greybel-utils-with-comments.src uglify 1`] = `
"globals.I=globals
#import J from \\"./ascii.src\\";
#include \\"./ascii.src\\";
#include \\"../fixtures/sub-import.src\\";
\\"true\\"
//debugger"
`;

exports[`parse default scripts has-index.src 1`] = `
"globals.test=\\"was\\"
locals.foo=\\"moo\\"
print(globals.hasIndex(\\"test\\"))
print(locals.hasIndex(\\"foo\\"))
print(globals.hasIndex(\\"doesNotExist\\"))
print(locals.hasIndex(\\"doesNotExist\\"))"
`;

exports[`parse default scripts has-index.src beautify 1`] = `
"globals.test = \\"was\\"
locals.foo = \\"moo\\"

print globals.hasIndex(\\"test\\")
print locals.hasIndex(\\"foo\\")
print globals.hasIndex(\\"doesNotExist\\")
print locals.hasIndex(\\"doesNotExist\\")"
`;

exports[`parse default scripts has-index.src beautify with custom settings 1`] = `
"globals.test = \\"was\\"
locals.foo = \\"moo\\"

print(globals.hasIndex(\\"test\\"))
print(locals.hasIndex(\\"foo\\"))
print(globals.hasIndex(\\"doesNotExist\\"))
print(locals.hasIndex(\\"doesNotExist\\"))"
`;

exports[`parse default scripts has-index.src uglify 1`] = `
"globals.I=globals
I.J=\\"was\\"
locals.K=\\"moo\\"
print(I.hasIndex(\\"J\\"))
print(locals.hasIndex(\\"K\\"))
print(I.hasIndex(\\"doesNotExist\\"))
print(locals.hasIndex(\\"doesNotExist\\"))"
`;

exports[`parse default scripts import-code.src 1`] = `
"import_code(\\"./ascii\\")
import_code(\\"../fixtures/sub-import\\")
import_code(\\"./isa.src\\")

import_code(\\"./file-does-not-exit\\")
print(123)"
`;

exports[`parse default scripts import-code.src beautify 1`] = `
"import_code(\\"./ascii\\")
import_code(\\"../fixtures/sub-import\\")
import_code(\\"./isa.src\\") // override=./isa.src;

import_code(\\"./file-does-not-exit\\") // no-eval;

print 123"
`;

exports[`parse default scripts import-code.src beautify with custom settings 1`] = `
"import_code(\\"./ascii\\")
import_code(\\"../fixtures/sub-import\\")
import_code(\\"./file-does-not-exit\\") // override=./isa.src;
import_code(\\"./file-does-not-exit\\") // no-emit;
import_code(\\"./file-does-not-exit\\") // no-eval;

print(123)"
`;

exports[`parse default scripts import-code.src uglify 1`] = `
"globals.I=globals
import_code(\\"./ascii\\")
import_code(\\"../fixtures/sub-import\\")
import_code(\\"./isa.src\\")
import_code(\\"./file-does-not-exit\\")
print(123)"
`;

exports[`parse default scripts import-code-with-import.src 1`] = `"import_code(\\"../fixtures/other-import\\")"`;

exports[`parse default scripts import-code-with-import.src beautify 1`] = `"import_code(\\"../fixtures/other-import\\")"`;

exports[`parse default scripts import-code-with-import.src beautify with custom settings 1`] = `"import_code(\\"../fixtures/other-import\\")"`;

exports[`parse default scripts import-code-with-import.src uglify 1`] = `
"globals.I=globals
import_code(\\"../fixtures/other-import\\")"
`;

exports[`parse default scripts isa.src 1`] = `
"print(2 isa number)
print(2 isa string)
print(2 isa list)
print(2 isa map)
print(\\"abc\\" isa number)
print(\\"abc\\" isa string)
print(\\"abc\\" isa list)
print(\\"abc\\" isa map)
print([1,2,3] isa number)
print([1,2,3] isa string)
print([1,2,3] isa list)
print([1,2,3] isa map)
print({} isa number)
print({} isa string)
print({} isa list)
print({} isa map)
print({} isa funcRef)"
`;

exports[`parse default scripts isa.src beautify 1`] = `
"print 2 isa number
print 2 isa string
print 2 isa list
print 2 isa map

print \\"abc\\" isa number
print \\"abc\\" isa string
print \\"abc\\" isa list
print \\"abc\\" isa map

print [
	1,
	2,
	3,
] isa number
print [
	1,
	2,
	3,
] isa string
print [
	1,
	2,
	3,
] isa list
print [
	1,
	2,
	3,
] isa map

print {} isa number
print {} isa string
print {} isa list
print {} isa map

print {} isa funcRef

"
`;

exports[`parse default scripts isa.src beautify with custom settings 1`] = `
"print(2 isa number)
print(2 isa string)
print(2 isa list)
print(2 isa map)

print(\\"abc\\" isa number)
print(\\"abc\\" isa string)
print(\\"abc\\" isa list)
print(\\"abc\\" isa map)

print([
          1,
          2,
          3,
] isa number)
print([
          1,
          2,
          3,
] isa string)
print([
          1,
          2,
          3,
] isa list)
print([
          1,
          2,
          3,
] isa map)

print({} isa number)
print({} isa string)
print({} isa list)
print({} isa map)

print({} isa funcRef)

"
`;

exports[`parse default scripts isa.src uglify 1`] = `
"globals.I=globals
I.J=\\"abc\\"
print(2 isa number)
print(2 isa string)
print(2 isa list)
print(2 isa map)
print(J isa number)
print(J isa string)
print(J isa list)
print(J isa map)
print([1,2,3] isa number)
print([1,2,3] isa string)
print([1,2,3] isa list)
print([1,2,3] isa map)
print({} isa number)
print({} isa string)
print({} isa list)
print({} isa map)
print({} isa funcRef)"
`;

exports[`parse default scripts literal-special-chars.src 1`] = `"test=\\"$$1 $$$$'2   $\`$\`$\` $23\\""`;

exports[`parse default scripts literal-special-chars.src beautify 1`] = `"test = \\"$$1 $$$$'2   $\`$\`$\` $23\\""`;

exports[`parse default scripts literal-special-chars.src beautify with custom settings 1`] = `"test = \\"$$1 $$$$'2   $\`$\`$\` $23\\""`;

exports[`parse default scripts literal-special-chars.src uglify 1`] = `
"globals.I=globals
J=\\"$$1 $$$$'2   $\`$\`$\` $23\\""
`;

exports[`parse default scripts map.src 1`] = `
"test={{\\"myTest\\":0,1:2}:1}
test2={[12,14]:1}
test3={test:234}
test4={1:\\"foo\\"}
test5={123:\\"bar\\"}"
`;

exports[`parse default scripts map.src beautify 1`] = `
"test = { {
	\\"myTest\\": 0,
	1: 2,
}: true }
test2 = { [
	12,
	14,
]: true }
test3 = { test: 234 }
test4 = { true: \\"foo\\" }
test5 = { 123: \\"bar\\" }"
`;

exports[`parse default scripts map.src beautify with custom settings 1`] = `
"test = { {
          \\"myTest\\": 0,
          1: 2,
}: true }
test2 = { [
          12,
          14,
]: true }
test3 = { test: 234 }
test4 = { true: \\"foo\\" }
test5 = { 123: \\"bar\\" }"
`;

exports[`parse default scripts map.src uglify 1`] = `
"globals.I=globals
J={{\\"myTest\\":0,1:2}:1}
K={[12,14]:1}
L={J:234}
M={1:\\"foo\\"}
N={123:\\"bar\\"}"
`;

exports[`parse default scripts multiline-comment.src 1`] = `"print(\\"test\\")"`;

exports[`parse default scripts multiline-comment.src beautify 1`] = `
"/* 


my Test

** */ print \\"test\\" /* 

another comment

 */// one line comment"
`;

exports[`parse default scripts multiline-comment.src beautify with custom settings 1`] = `
"/* 


my Test

** */ print(\\"test\\") /* 

another comment

 */// one line comment"
`;

exports[`parse default scripts multiline-comment.src uglify 1`] = `
"globals.I=globals
print(\\"test\\")"
`;

exports[`parse default scripts negation.src 1`] = `
"test=-1+2+-2+3
foo=[-1,-2+4,(-2)+-4+6]
print(test)
print(foo)"
`;

exports[`parse default scripts negation.src beautify 1`] = `
"test = -1 + 2 + -2 + 3
foo = [
	-1,
	-2 + 4,
	(-2) + -4 + 6,
]

print test
print foo"
`;

exports[`parse default scripts negation.src beautify with custom settings 1`] = `
"test = -1 + 2 + -2 + 3
foo = [
          -1,
          -2 + 4,
          (-2) + -4 + 6,
]

print(test)
print(foo)"
`;

exports[`parse default scripts negation.src uglify 1`] = `
"globals.I=globals
J=-1+2+-2+3
K=[-1,-2+4,(-2)+-4+6]
print(J)
print(K)"
`;

exports[`parse default scripts negative-numeric.src 1`] = `
"test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\"
test[:-1]=\\"foo\\""
`;

exports[`parse default scripts negative-numeric.src beautify 1`] = `
"test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\""
`;

exports[`parse default scripts negative-numeric.src beautify with custom settings 1`] = `
"test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\"
test[ : -1] = \\"foo\\""
`;

exports[`parse default scripts negative-numeric.src uglify 1`] = `
"globals.I=globals
I.L=-1
I.K=\\"foo\\"
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K
J[:L]=K"
`;

exports[`parse default scripts obj-init.src 1`] = `
"valueOfIdentifier=\\"foo\\"
myObject={\\"test\\":{\\"another\\":\\"123\\"},\\"value\\":\\"123\\",\\"idtf\\":valueOfIdentifier}
print([myObject.test.another,myObject.value,myObject.idtf])
myList=[{\\"another\\":\\"123\\"},\\"123\\",valueOfIdentifier]
print(myList)"
`;

exports[`parse default scripts obj-init.src beautify 1`] = `
"valueOfIdentifier = \\"foo\\"

myObject = {
	\\"test\\": { \\"another\\": \\"123\\" },
	\\"value\\": \\"123\\",
	\\"idtf\\": valueOfIdentifier,
}

print [
	myObject.test.another,
	myObject.value,
	myObject.idtf,
]

myList = [
	{ \\"another\\": \\"123\\" },
	\\"123\\",
	valueOfIdentifier,
]

print myList"
`;

exports[`parse default scripts obj-init.src beautify with custom settings 1`] = `
"valueOfIdentifier = \\"foo\\"

myObject = {
          \\"test\\": { \\"another\\": \\"123\\" },
          \\"value\\": \\"123\\",
          \\"idtf\\": valueOfIdentifier,
}

print([
          myObject.test.another,
          myObject.value,
          myObject.idtf,
])

myList = [
          { \\"another\\": \\"123\\" },
          \\"123\\",
          valueOfIdentifier,
]

print(myList)"
`;

exports[`parse default scripts obj-init.src uglify 1`] = `
"globals.I=globals
I.Q=\\"123\\"
J=\\"foo\\"
K={\\"test\\":{\\"another\\":Q},\\"value\\":Q,\\"idtf\\":J}
print([K.test.another,K.value,K.idtf])
P=[{\\"another\\":Q},Q,J]
print(P)"
`;

exports[`parse default scripts optimize.src 1`] = `
"test=function(abc)
print(abc)
end function
superlangername=function(abc)
print(abc)
end function
superlangername3=function(abc)
print(abc)
end function
superlangername4=function(abc)
print(abc)
end function
superlangername5=function(abc)
print(abc)
end function
test(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername4(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername5(\\"xxxxxxxxxx\\")
superlangername3(\\"xxxxxxxxxx\\")"
`;

exports[`parse default scripts optimize.src beautify 1`] = `
"test = function(abc)
	print abc
end function

superlangername = function(abc)
	print abc
end function

superlangername3 = function(abc)
	print abc
end function

superlangername4 = function(abc)
	print abc
end function

superlangername5 = function(abc)
	print abc
end function

test \\"xxxxxxxxxx\\"
superlangername \\"xxxxxxxxxx\\"
superlangername4 \\"xxxxxxxxxx\\"
superlangername \\"xxxxxxxxxx\\"
superlangername5 \\"xxxxxxxxxx\\"
superlangername3 \\"xxxxxxxxxx\\""
`;

exports[`parse default scripts optimize.src beautify with custom settings 1`] = `
"test = function(abc)
          print(abc)
end function

superlangername = function(abc)
          print(abc)
end function

superlangername3 = function(abc)
          print(abc)
end function

superlangername4 = function(abc)
          print(abc)
end function

superlangername5 = function(abc)
          print(abc)
end function

test(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername4(\\"xxxxxxxxxx\\")
superlangername(\\"xxxxxxxxxx\\")
superlangername5(\\"xxxxxxxxxx\\")
superlangername3(\\"xxxxxxxxxx\\")"
`;

exports[`parse default scripts optimize.src uglify 1`] = `
"globals.I=globals
I.P=\\"xxxxxxxxxx\\"
J=function(O)
print(O)
end function
K=function(O)
print(O)
end function
L=function(O)
print(O)
end function
M=function(O)
print(O)
end function
N=function(O)
print(O)
end function
J(P)
K(P)
M(P)
K(P)
N(P)
L(P)"
`;

exports[`parse default scripts outer.src 1`] = `
"main=function
num=0
iterate=function
clear_screen
text=\\"<mark=green><color=black>\\"+outer.num
print(outer.hasIndex(\\"num\\"))
if (outer.num>20) then text=\\"<mark=yellow><color=green>\\"+outer.num
if (outer.num>40) then text=\\"<mark=red><color=yellow>\\"+outer.num
if (outer.num<-20) then text=\\"<mark=green><color=yellow>\\"+outer.num
if (outer.num<-40) then text=\\"<mark=yellow><color=red>\\"+outer.num
print(text)
key=user_input(\\"test\\",0,1)
if (key==\\"UpArrow\\") then
outer.num=outer.num+(1)
else if (key==\\"DownArrow\\") then
outer.num=outer.num-(1)
else
exit(\\"bye\\")
end if
end function
while (1)
iterate
end while
end function
main"
`;

exports[`parse default scripts outer.src beautify 1`] = `
"main = function
	num = 0
	iterate = function
		clear_screen

		text = \\"<mark=green><color=black>\\" + outer.num

		print outer.hasIndex(\\"num\\")

		if outer.num > 20 then text = \\"<mark=yellow><color=green>\\" + outer.num
		if outer.num > 40 then text = \\"<mark=red><color=yellow>\\" + outer.num
		if outer.num < -20 then text = \\"<mark=green><color=yellow>\\" + outer.num
		if outer.num < -40 then text = \\"<mark=yellow><color=red>\\" + outer.num

		print text
		key = user_input(\\"test\\", false, true)

		if key == \\"UpArrow\\" then
			outer.num = outer.num + (1)
		else if key == \\"DownArrow\\" then
			outer.num = outer.num - (1)
		else
			exit \\"bye\\"
		end if
	end function

	while (true)
		iterate
	end while
end function

main"
`;

exports[`parse default scripts outer.src beautify with custom settings 1`] = `
"main = function
          num = 0
          iterate = function
                    clear_screen

                    text = \\"<mark=green><color=black>\\" + outer.num

                    print(outer.hasIndex(\\"num\\"))

                    if outer.num > 20 then text = \\"<mark=yellow><color=green>\\" + outer.num
                    if outer.num > 40 then text = \\"<mark=red><color=yellow>\\" + outer.num
                    if outer.num < -20 then text = \\"<mark=green><color=yellow>\\" + outer.num
                    if outer.num < -40 then text = \\"<mark=yellow><color=red>\\" + outer.num

                    print(text)
                    key = user_input(\\"test\\", false, true)

                    if key == \\"UpArrow\\" then
                              outer.num += 1
                    else if key == \\"DownArrow\\" then
                              outer.num -= 1
                    else
                              exit(\\"bye\\")
                    end if
          end function

          while (true)
                    iterate
          end while
end function

main"
`;

exports[`parse default scripts outer.src uglify 1`] = `
"globals.I=globals
J=function
K=0
L=function
clear_screen
M=\\"<mark=green><color=black>\\"+outer.K
print(outer.hasIndex(\\"K\\"))
if (outer.K>20) then M=\\"<mark=yellow><color=green>\\"+outer.K
if (outer.K>40) then M=\\"<mark=red><color=yellow>\\"+outer.K
if (outer.K<-20) then M=\\"<mark=green><color=yellow>\\"+outer.K
if (outer.K<-40) then M=\\"<mark=yellow><color=red>\\"+outer.K
print(M)
N=user_input(\\"test\\",0,1)
if (N==\\"UpArrow\\") then
outer.K=outer.K+(1)
else if (N==\\"DownArrow\\") then
outer.K=outer.K-(1)
else
exit(\\"bye\\")
end if
end function
while (1)
L
end while
end function
J"
`;

exports[`parse default scripts password-generator.src 1`] = `
"PasswordGenerator={}
PasswordGenerator.MAX_PASSWORD_LENGTH=15
PasswordGenerator.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS=\\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC=PasswordGenerator.ALPHABETIC_CHARACTERS+PasswordGenerator.ALPHABETIC_CHARACTERS.upper+PasswordGenerator.NUMBER_CHARACTERS
PasswordGenerator.constructor=function
me=self
me.buffer=[0]
me.characters=me.ALPHA_NUMERIC
return me
end function
PasswordGenerator.increaseBuffer=function(i)
me=self
currentCharBuffer=me.buffer
maxBufferSize=me.characters.len
if (i==null) then i=currentCharBuffer.len-1
p=currentCharBuffer[i]
p=p+1
currentCharBuffer[i]=p
if (p==maxBufferSize) then
currentCharBuffer[i]=0
if (i==0) then
currentCharBuffer.push(0)
else
me.increaseBuffer(i-1)
end if
end if
end function
PasswordGenerator.gen=function
me=self
currentCharBuffer=me.buffer
generatorCharacters=me.characters
password=\\"\\"
index=0
while index<currentCharBuffer.len
pointer=currentCharBuffer[index]
password=password+generatorCharacters[pointer]
if (index==currentCharBuffer.len-1) then self.increaseBuffer
index=index+1
end while
if (currentCharBuffer.len>me.MAX_PASSWORD_LENGTH) then
return null
end if
return password
end function
pgen=(new PasswordGenerator).constructor
index=0
max=10
result=[]
while (index<max)
result.push(pgen.gen)
index=index+1
end while
print(result)"
`;

exports[`parse default scripts password-generator.src beautify 1`] = `
"PasswordGenerator = {}

PasswordGenerator.MAX_PASSWORD_LENGTH = 15
PasswordGenerator.ALPHABETIC_CHARACTERS = \\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS = \\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC = PasswordGenerator.ALPHABETIC_CHARACTERS + PasswordGenerator.ALPHABETIC_CHARACTERS.upper + PasswordGenerator.NUMBER_CHARACTERS

PasswordGenerator.constructor = function
	me = self
	me.buffer = [ 0 ]
	me.characters = me.ALPHA_NUMERIC
	return me
end function

PasswordGenerator.increaseBuffer = function(i)
	me = self
	currentCharBuffer = me.buffer
	maxBufferSize = me.characters.len
	if i == null then i = currentCharBuffer.len - 1
	p = currentCharBuffer[i]
	p = p + 1
	currentCharBuffer[i] = p
	if p == maxBufferSize then
		currentCharBuffer[i] = 0
		if i == 0 then
			currentCharBuffer.push 0
		else
			me.increaseBuffer i - 1
		end if
	end if
end function

PasswordGenerator.gen = function
	me = self
	currentCharBuffer = me.buffer
	generatorCharacters = me.characters
	password = \\"\\"
	index = 0

	while index < currentCharBuffer.len
		pointer = currentCharBuffer[index]
		password = password + generatorCharacters[pointer]
		if index == currentCharBuffer.len - 1 then self.increaseBuffer
		index = index + 1
	end while

	if currentCharBuffer.len > me.MAX_PASSWORD_LENGTH then
		return null
	end if

	return password
end function

pgen = (new PasswordGenerator).constructor

index = 0
max = 10
result = []

while (index < max)
	result.push pgen.gen
	index = index + 1
end while

print result"
`;

exports[`parse default scripts password-generator.src beautify with custom settings 1`] = `
"PasswordGenerator = {}

PasswordGenerator.MAX_PASSWORD_LENGTH = 15
PasswordGenerator.ALPHABETIC_CHARACTERS = \\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS = \\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC = PasswordGenerator.ALPHABETIC_CHARACTERS + PasswordGenerator.ALPHABETIC_CHARACTERS.upper + PasswordGenerator.NUMBER_CHARACTERS

PasswordGenerator.constructor = function
          me = self
          me.buffer = [ 0 ]
          me.characters = me.ALPHA_NUMERIC
          return me
end function

PasswordGenerator.increaseBuffer = function(i)
          me = self
          currentCharBuffer = me.buffer
          maxBufferSize = me.characters.len
          if i == null then i = currentCharBuffer.len - 1
          p = currentCharBuffer[i]
          p += 1
          currentCharBuffer[i] = p
          if p == maxBufferSize then
                    currentCharBuffer[i] = 0
                    if i == 0 then
                              currentCharBuffer.push(0)
                    else
                              me.increaseBuffer(i - 1)
                    end if
          end if
end function

PasswordGenerator.gen = function
          me = self
          currentCharBuffer = me.buffer
          generatorCharacters = me.characters
          password = \\"\\"
          index = 0

          while index < currentCharBuffer.len
                    pointer = currentCharBuffer[index]
                    password += generatorCharacters[pointer]
                    if index == currentCharBuffer.len - 1 then self.increaseBuffer
                    index += 1
          end while

          if currentCharBuffer.len > me.MAX_PASSWORD_LENGTH then
                    return null
          end if

          return password
end function

pgen = (new PasswordGenerator).constructor

index = 0
max = 10
result = []

while (index < max)
          result.push(pgen.gen)
          index += 1
end while

print(result)"
`;

exports[`parse default scripts password-generator.src uglify 1`] = `
"globals.I=globals
J={}
J.MAX_PASSWORD_LENGTH=15
J.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
J.NUMBER_CHARACTERS=\\"0123456789\\"
J.ALPHA_NUMERIC=J.ALPHABETIC_CHARACTERS+J.ALPHABETIC_CHARACTERS.upper+J.NUMBER_CHARACTERS
J.constructor=function
V=self
V.buffer=[0]
V.characters=V.ALPHA_NUMERIC
return V
end function
J.increaseBuffer=function(Y)
V=self
Z=V.buffer
a=V.characters.len
if (Y==null) then Y=Z.len-1
b=Z[Y]
b=b+1
Z[Y]=b
if (b==a) then
Z[Y]=0
if (Y==0) then
Z.push(0)
else
V.increaseBuffer(Y-1)
end if
end if
end function
J.gen=function
V=self
Z=V.buffer
c=V.characters
d=\\"\\"
S=0
while S<Z.len
e=Z[S]
d=d+c[e]
if (S==Z.len-1) then self.increaseBuffer
S=S+1
end while
if (Z.len>V.MAX_PASSWORD_LENGTH) then
return null
end if
return d
end function
R=(new J).constructor
S=0
T=10
U=[]
while (S<T)
U.push(R.gen)
S=S+1
end while
print(U)"
`;

exports[`parse default scripts pseudo-crypto.src 1`] = `
"String={}
String.constructor=function(str)
self.str=str
return self
end function
String.parse=function(values)
result=self.str
index=0
maxIndex=values.len
while index<maxIndex
result=result.replace(\\"$\\"+index,values[index])
index=index+1
end while
return (new self).constructor(result)
end function
String.startsWith=function(str)
return self.str.indexOf(str)==0
end function
String.substr=function(startIndex,endIndex)
return (new self).constructor(slice(self.str,startIndex,endIndex))
end function
String.indexOf=function(str)
return self.str.indexOf(str)
end function
String.replace=function(str,newStr)
return (new self).constructor(self.str.replace(str,newStr))
end function
String.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
String.toString=function
return self.str
end function
String.length=function
return self.str.len
end function
String.split=function(seperator)
return self.str.split(seperator)
end function
String.trim=function(seperator)
return (new self).constructor(self.str.trim)
end function
Error={}
Error.String=String
Error.constructor=function(message,values)
m=self
m.message=message
if (values!=null) then
m.message=(new m.String).constructor(message).parse(values).toString
end if
return m
end function
Error.throw=function
exit(\\"<color=#ff0000>\\"+self.message+\\"</color>\\")
end function
Crypto={}
Crypto.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret=\\"test123\\"
Crypto.maxCharCode=55295
Crypto.Error=Error
Crypto.constructor=function(defaultSecret,hashFn,charset)
me=self
me.defaultSecret=defaultSecret
me.table=charset
me.hashFn=@hashFn
if (@hashFn==null) then me.hashFn=@md5
if charset==null then me.table=me.defaultCharset
if me.table.len!=64 then (new me.Error).constructor(\\"Invalid charset $0...\\",[me.table]).throw
return me
end function
Crypto.getHash=function(pw)
me=self
hash=[]
x=me.hashFn(pw)
for char in x
hash.push(char.code)
end for
hash.reverse
return hash
end function
Crypto.encrypt=function(str,pw)
me=self
if (pw==null) then pw=me.defaultSecret
hash=me.getHash(pw)
hashPointer=0
output=[]
position=0
padding=str.len%3
max=str.len-padding
get=function(v)
if (not me.table.hasIndex(v)) then
(new me.Error).constructor(\\"Invalid index $0...\\",[v]).throw
end if
return me.table[v]
end function
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
LSHIFT=function(a,b)
return bitwise(\\"<<\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while position<max
m=hash[position%hash.len-1]
a=LSHIFT(str[position].code+m,16)
b=LSHIFT(str[position+1].code+m,8)
c=str[position+2].code+m
buffer=a+b+c
output.push(get(AND(RSHIFT(buffer,18),63)))
output.push(get(AND(RSHIFT(buffer,12),63)))
output.push(get(AND(RSHIFT(buffer,6),63)))
output.push(get(AND(buffer,63)))
position=position+3
end while
if (padding==2) then
m=hash[position%hash.len-1]
a=LSHIFT(str[position].code+m,8)
b=str[position+1].code+m
buffer=a+b
output.push(get(RSHIFT(buffer,10)))
output.push(get(AND(RSHIFT(buffer,4),63)))
output.push(get(AND(LSHIFT(buffer,2),63)))
output.push(\\"=\\")
else if (padding==1) then
m=hash[position%hash.len-1]
buffer=str[position].code+m
output.push(get(RSHIFT(buffer,2)))
output.push(get(AND(LSHIFT(buffer,4),63)))
output.push(\\"==\\")
end if
return output.join(\\"\\")
end function
Crypto.decrypt=function(str,pw)
me=self
if (pw==null) then pw=me.defaultSecret
hash=me.getHash(pw)
hashPointer=0
hashLength=hash.len
output=[]
bitCounter=0
bitStorage=0
position=0
hashPointer=0
max=str.len
AND=function(a,b)
return bitwise(\\"&\\",a,b)
end function
RSHIFT=function(a,b)
return bitwise(\\">>\\",a,b)
end function
while position<max
buffer=me.table.indexOf(str[position])
currentBit=bitCounter
bitCounter=bitCounter+1
if (currentBit%4) then
bitStorage=bitStorage*64+buffer
else
bitStorage=buffer
end if
if (currentBit%4) then
expectedHashIndex=(floor(hashPointer/3)*3)%hashLength-1
if (not hash.hasIndex(expectedHashIndex)) then break
m=hash[expectedHashIndex]
operation=AND(-2*bitCounter,6)
operation=RSHIFT(bitStorage,operation)
operation=AND(255,operation)
if (operation!=0) then
charCode=operation-m
if (charCode>me.maxCharCode) then break
output.push(char(charCode))
end if
hashPointer=hashPointer+1
end if
position=position+1
end while
return output.join(\\"\\")
end function
test=(new Crypto).constructor(\\"test\\")
pwd=\\"abcde\\"
foo=test.encrypt(pwd)
decrypted=test.decrypt(foo)
print(foo)
print(decrypted)"
`;

exports[`parse default scripts pseudo-crypto.src beautify 1`] = `
"String = {}

String.constructor = function(str)
	self.str = str
	return self
end function

String.parse = function(values)
	result = self.str
	index = 0
	maxIndex = values.len

	while index < maxIndex
		result = result.replace(\\"$\\" + index, values[index])
		index = index + 1
	end while

	return (new self).constructor(result)
end function

String.startsWith = function(str)
	return self.str.indexOf(str) == 0
end function

String.substr = function(startIndex, endIndex)
	return (new self).constructor(slice(self.str, startIndex, endIndex))
end function

String.indexOf = function(str)
	return self.str.indexOf(str)
end function

String.replace = function(str, newStr)
	return (new self).constructor(self.str.replace(str, newStr))
end function

String.remove = function(str)
	return (new self).constructor(self.str.remove(str))
end function

String.toString = function
	return self.str
end function

String.length = function
	return self.str.len
end function

String.split = function(seperator)
	return self.str.split(seperator)
end function

String.trim = function(seperator)
	return (new self).constructor(self.str.trim)
end function

Error = {}

Error.String = String

Error.constructor = function(message, values)
	m = self
	m.message = message
	if values != null then
		m.message = (new m.String).constructor(message).parse(values).toString
	end if
	return m
end function

Error.throw = function
	exit \\"<color=#ff0000>\\" + self.message + \\"</color>\\"
end function

Crypto = {}

Crypto.defaultCharset = \\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret = \\"test123\\"
Crypto.maxCharCode = 55295
Crypto.Error = Error

Crypto.constructor = function(defaultSecret, hashFn, charset)
	me = self
	me.defaultSecret = defaultSecret
	me.table = charset
	me.hashFn = @hashFn
	if @hashFn == null then me.hashFn = @md5
	if charset == null then me.table = me.defaultCharset
	if me.table.len != 64 then (new me.Error).constructor(\\"Invalid charset $0...\\", [ me.table ]).throw
	return me
end function

Crypto.getHash = function(pw)
	me = self
	hash = []
	x = me.hashFn(pw)
	for char in x
		hash.push char.code
	end for
	hash.reverse
	return hash
end function

Crypto.encrypt = function(str, pw)
	me = self
	if pw == null then pw = me.defaultSecret
	hash = me.getHash(pw)
	hashPointer = 0
	output = []
	position = 0
	padding = str.len % 3
	max = str.len - padding
	get = function(v)
		if not me.table.hasIndex(v) then
			(new me.Error).constructor(\\"Invalid index $0...\\", [ v ]).throw
		end if
		return me.table[v]
	end function
	AND = function(a, b)
		return bitwise(\\"&\\", a, b)
	end function
	LSHIFT = function(a, b)
		return bitwise(\\"<<\\", a, b)
	end function
	RSHIFT = function(a, b)
		return bitwise(\\">>\\", a, b)
	end function
	while position < max
		m = hash[position % hash.len - 1]
		a = LSHIFT(str[position].code + m, 16)
		b = LSHIFT(str[position + 1].code + m, 8)
		c = str[position + 2].code + m
		buffer = a + b + c
		output.push get(AND(RSHIFT(buffer, 18), 63))
		output.push get(AND(RSHIFT(buffer, 12), 63))
		output.push get(AND(RSHIFT(buffer, 6), 63))
		output.push get(AND(buffer, 63))
		position = position + 3
	end while
	if padding == 2 then
		m = hash[position % hash.len - 1]
		a = LSHIFT(str[position].code + m, 8)
		b = str[position + 1].code + m
		buffer = a + b
		output.push get(RSHIFT(buffer, 10))
		output.push get(AND(RSHIFT(buffer, 4), 63))
		output.push get(AND(LSHIFT(buffer, 2), 63))
		output.push \\"=\\"
	else if padding == 1 then
		m = hash[position % hash.len - 1]
		buffer = str[position].code + m
		output.push get(RSHIFT(buffer, 2))
		output.push get(AND(LSHIFT(buffer, 4), 63))
		output.push \\"==\\"
	end if
	return output.join(\\"\\")
end function

Crypto.decrypt = function(str, pw)
	me = self
	if pw == null then pw = me.defaultSecret
	hash = me.getHash(pw)
	hashPointer = 0
	hashLength = hash.len
	output = []
	bitCounter = 0
	bitStorage = 0
	position = 0
	hashPointer = 0
	max = str.len
	AND = function(a, b)
		return bitwise(\\"&\\", a, b)
	end function
	RSHIFT = function(a, b)
		return bitwise(\\">>\\", a, b)
	end function
	while position < max
		buffer = me.table.indexOf(str[position])
		currentBit = bitCounter
		bitCounter = bitCounter + 1
		if currentBit % 4 then
			bitStorage = bitStorage * 64 + buffer
		else
			bitStorage = buffer
		end if
		if currentBit % 4 then
			expectedHashIndex = (floor(hashPointer / 3) * 3) % hashLength - 1
			if not hash.hasIndex(expectedHashIndex) then break
			m = hash[expectedHashIndex]
			operation = AND(-2 * bitCounter, 6)
			operation = RSHIFT(bitStorage, operation)
			operation = AND(255, operation)
			if operation != 0 then
				charCode = operation - m
				if charCode > me.maxCharCode then break
				output.push char(charCode)
			end if
			hashPointer = hashPointer + 1
		end if
		position = position + 1
	end while
	return output.join(\\"\\")
end function

test = (new Crypto).constructor(\\"test\\")

pwd = \\"abcde\\"

foo = test.encrypt(pwd)
decrypted = test.decrypt(foo)

print foo
print decrypted
"
`;

exports[`parse default scripts pseudo-crypto.src beautify with custom settings 1`] = `
"String = {}

String.constructor = function(str)
          self.str = str
          return self
end function

String.parse = function(values)
          result = self.str
          index = 0
          maxIndex = values.len

          while index < maxIndex
                    result = result.replace(\\"$\\" + index, values[index])
                    index += 1
          end while

          return (new self).constructor(result)
end function

String.startsWith = function(str)
          return self.str.indexOf(str) == 0
end function

String.substr = function(startIndex, endIndex)
          return (new self).constructor(slice(self.str, startIndex, endIndex))
end function

String.indexOf = function(str)
          return self.str.indexOf(str)
end function

String.replace = function(str, newStr)
          return (new self).constructor(self.str.replace(str, newStr))
end function

String.remove = function(str)
          return (new self).constructor(self.str.remove(str))
end function

String.toString = function
          return self.str
end function

String.length = function
          return self.str.len
end function

String.split = function(seperator)
          return self.str.split(seperator)
end function

String.trim = function(seperator)
          return (new self).constructor(self.str.trim)
end function

Error = {}

Error.String = String

Error.constructor = function(message, values)
          m = self
          m.message = message
          if values != null then
                    m.message = (new m.String).constructor(message).parse(values).toString
          end if
          return m
end function

Error.throw = function
          exit(\\"<color=#ff0000>\\" + self.message + \\"</color>\\")
end function

Crypto = {}

Crypto.defaultCharset = \\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.defaultSecret = \\"test123\\"
Crypto.maxCharCode = 55295
Crypto.Error = Error

Crypto.constructor = function(defaultSecret, hashFn, charset)
          me = self
          me.defaultSecret = defaultSecret
          me.table = charset
          me.hashFn = @hashFn
          if @hashFn == null then me.hashFn = @md5
          if charset == null then me.table = me.defaultCharset
          if me.table.len != 64 then (new me.Error).constructor(\\"Invalid charset $0...\\", [ me.table ]).throw
          return me
end function

Crypto.getHash = function(pw)
          me = self
          hash = []
          x = me.hashFn(pw)
          for char in x
                    hash.push(char.code)
          end for
          hash.reverse
          return hash
end function

Crypto.encrypt = function(str, pw)
          me = self
          if pw == null then pw = me.defaultSecret
          hash = me.getHash(pw)
          hashPointer = 0
          output = []
          position = 0
          padding = str.len % 3
          max = str.len - padding
          get = function(v)
                    if not me.table.hasIndex(v) then
                              (new me.Error).constructor(\\"Invalid index $0...\\", [ v ]).throw
                    end if
                    return me.table[v]
          end function
          AND = function(a, b)
                    return bitwise(\\"&\\", a, b)
          end function
          LSHIFT = function(a, b)
                    return bitwise(\\"<<\\", a, b)
          end function
          RSHIFT = function(a, b)
                    return bitwise(\\">>\\", a, b)
          end function
          while position < max
                    m = hash[position % hash.len - 1]
                    a = LSHIFT(str[position].code + m, 16)
                    b = LSHIFT(str[position + 1].code + m, 8)
                    c = str[position + 2].code + m
                    buffer = a + b + c
                    output.push(get(AND(RSHIFT(buffer, 18), 63)))
                    output.push(get(AND(RSHIFT(buffer, 12), 63)))
                    output.push(get(AND(RSHIFT(buffer, 6), 63)))
                    output.push(get(AND(buffer, 63)))
                    position += 3
          end while
          if padding == 2 then
                    m = hash[position % hash.len - 1]
                    a = LSHIFT(str[position].code + m, 8)
                    b = str[position + 1].code + m
                    buffer = a + b
                    output.push(get(RSHIFT(buffer, 10)))
                    output.push(get(AND(RSHIFT(buffer, 4), 63)))
                    output.push(get(AND(LSHIFT(buffer, 2), 63)))
                    output.push(\\"=\\")
          else if padding == 1 then
                    m = hash[position % hash.len - 1]
                    buffer = str[position].code + m
                    output.push(get(RSHIFT(buffer, 2)))
                    output.push(get(AND(LSHIFT(buffer, 4), 63)))
                    output.push(\\"==\\")
          end if
          return output.join(\\"\\")
end function

Crypto.decrypt = function(str, pw)
          me = self
          if pw == null then pw = me.defaultSecret
          hash = me.getHash(pw)
          hashPointer = 0
          hashLength = hash.len
          output = []
          bitCounter = 0
          bitStorage = 0
          position = 0
          hashPointer = 0
          max = str.len
          AND = function(a, b)
                    return bitwise(\\"&\\", a, b)
          end function
          RSHIFT = function(a, b)
                    return bitwise(\\">>\\", a, b)
          end function
          while position < max
                    buffer = me.table.indexOf(str[position])
                    currentBit = bitCounter
                    bitCounter += 1
                    if currentBit % 4 then
                              bitStorage = bitStorage * 64 + buffer
                    else
                              bitStorage = buffer
                    end if
                    if currentBit % 4 then
                              expectedHashIndex = (floor(hashPointer / 3) * 3) % hashLength - 1
                              if not hash.hasIndex(expectedHashIndex) then break
                              m = hash[expectedHashIndex]
                              operation = AND(-2 * bitCounter, 6)
                              operation = RSHIFT(bitStorage, operation)
                              operation = AND(255, operation)
                              if operation != 0 then
                                        charCode = operation - m
                                        if charCode > me.maxCharCode then break
                                        output.push(char(charCode))
                              end if
                              hashPointer += 1
                    end if
                    position += 1
          end while
          return output.join(\\"\\")
end function

test = (new Crypto).constructor(\\"test\\")

pwd = \\"abcde\\"

foo = test.encrypt(pwd)
decrypted = test.decrypt(foo)

print(foo)
print(decrypted)
"
`;

exports[`parse default scripts pseudo-crypto.src uglify 1`] = `
"globals.I=globals
I.Ϻ=null
I.ϻ=63
J={}
J.constructor=function(str)
self.str=str
return self
end function
J.parse=function(values)
d=self.str
e=0
f=values.len
while e<f
d=d.replace(\\"$\\"+e,values[e])
e=e+1
end while
return (new self).constructor(d)
end function
J.startsWith=function(str)
return self.str.indexOf(str)==0
end function
J.substr=function(g,h)
return (new self).constructor(slice(self.str,g,h))
end function
J.indexOf=function(str)
return self.str.indexOf(str)
end function
J.replace=function(str,i)
return (new self).constructor(self.str.replace(str,i))
end function
J.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
J.toString=function
return self.str
end function
J.length=function
return self.str.len
end function
J.split=function(j)
return self.str.split(j)
end function
J.trim=function(j)
return (new self).constructor(self.str.trim)
end function
Q={}
Q.String=J
Q.constructor=function(k,values)
l=self
l.message=k
if (values!=Ϻ) then
l.message=(new l.String).constructor(k).parse(values).toString
end if
return l
end function
Q.throw=function
exit(\\"<color=#ff0000>\\"+self.message+\\"</color>\\")
end function
S={}
S.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
S.defaultSecret=\\"test123\\"
S.maxCharCode=55295
S.Error=Q
S.constructor=function(U,n,o)
p=self
p.defaultSecret=U
p.table=o
p.hashFn=@n
if (@n==Ϻ) then p.hashFn=@md5
if o==Ϻ then p.table=p.defaultCharset
if p.table.len!=64 then (new p.Error).constructor(\\"Invalid charset $0...\\",[p.table]).throw
return p
end function
S.getHash=function(r)
p=self
hash=[]
s=p.hashFn(r)
for char in s
hash.push(char.code)
end for
hash.reverse
return hash
end function
S.encrypt=function(str,r)
p=self
if (r==Ϻ) then r=p.defaultSecret
hash=p.getHash(r)
t=0
u=[]
ϲ=0
w=str.len%3
y=str.len-w
z=function(ϱ)
if (not p.table.hasIndex(ϱ)) then
(new p.Error).constructor(\\"Invalid index $0...\\",[ϱ]).throw
end if
return p.table[ϱ]
end function
_=function(Ϫ,Ϭ)
return bitwise(\\"&\\",Ϫ,Ϭ)
end function
Ϩ=function(Ϫ,Ϭ)
return bitwise(\\"<<\\",Ϫ,Ϭ)
end function
ϩ=function(Ϫ,Ϭ)
return bitwise(\\">>\\",Ϫ,Ϭ)
end function
while ϲ<y
l=hash[ϲ%hash.len-1]
Ϫ=Ϩ(str[ϲ].code+l,16)
Ϭ=Ϩ(str[ϲ+1].code+l,8)
Ϯ=str[ϲ+2].code+l
ϰ=Ϫ+Ϭ+Ϯ
u.push(z(_(ϩ(ϰ,18),ϻ)))
u.push(z(_(ϩ(ϰ,12),ϻ)))
u.push(z(_(ϩ(ϰ,6),ϻ)))
u.push(z(_(ϰ,ϻ)))
ϲ=ϲ+3
end while
if (w==2) then
l=hash[ϲ%hash.len-1]
Ϫ=Ϩ(str[ϲ].code+l,8)
Ϭ=str[ϲ+1].code+l
ϰ=Ϫ+Ϭ
u.push(z(ϩ(ϰ,10)))
u.push(z(_(ϩ(ϰ,4),ϻ)))
u.push(z(_(Ϩ(ϰ,2),ϻ)))
u.push(\\"=\\")
else if (w==1) then
l=hash[ϲ%hash.len-1]
ϰ=str[ϲ].code+l
u.push(z(ϩ(ϰ,2)))
u.push(z(_(Ϩ(ϰ,4),ϻ)))
u.push(\\"==\\")
end if
return u.join(\\"\\")
end function
S.decrypt=function(str,r)
p=self
if (r==Ϻ) then r=p.defaultSecret
hash=p.getHash(r)
t=0
ϳ=hash.len
u=[]
ϴ=0
ϵ=0
ϲ=0
t=0
y=str.len
_=function(Ϫ,Ϭ)
return bitwise(\\"&\\",Ϫ,Ϭ)
end function
ϩ=function(Ϫ,Ϭ)
return bitwise(\\">>\\",Ϫ,Ϭ)
end function
while ϲ<y
ϰ=p.table.indexOf(str[ϲ])
϶=ϴ
ϴ=ϴ+1
if (϶%4) then
ϵ=ϵ*64+ϰ
else
ϵ=ϰ
end if
if (϶%4) then
Ϸ=(floor(t/3)*3)%ϳ-1
if (not hash.hasIndex(Ϸ)) then break
l=hash[Ϸ]
ϸ=_(-2*ϴ,6)
ϸ=ϩ(ϵ,ϸ)
ϸ=_(255,ϸ)
if (ϸ!=0) then
Ϲ=ϸ-l
if (Ϲ>p.maxCharCode) then break
u.push(char(Ϲ))
end if
t=t+1
end if
ϲ=ϲ+1
end while
return u.join(\\"\\")
end function
Z=(new S).constructor(\\"test\\")
ϫ=\\"abcde\\"
ϭ=Z.encrypt(ϫ)
ϯ=Z.decrypt(ϭ)
print(ϭ)
print(ϯ)"
`;

exports[`parse default scripts random.src 1`] = `
"Random={}
Random.pool={}
Random.defaultSeed=\\"random\\"
Random.createPool=function(seed,val)
return {\\"seed\\":seed,\\"value\\":val,\\"generation\\":0}
end function
Random.calcSeed=function(seed)
seedVal=0
pos=seed.len
for char in seed
seedVal=seedVal+char.code+pos
pos=pos-1
end for
return seedVal
end function
Random.gen=function(min,max,seed,inc)
me=self
pool=me.pool
if (inc==null) then inc=1
if (seed==null) then seed=me.defaultSeed
if (pool.hasIndex(seed)) then
ps=pool[seed]
if (not inc) then return ps.value
ps.generation=ps.generation+1
val=floor((rnd(ps.value+ps.generation)*(max-min))+min)
ps.value=val
return val
end if
seedVal=me.calcSeed(seed)
val=floor((rnd(seedVal)*(max-min))+min)
pool[seed]=me.createPool(seedVal,val)
return val
end function
Random.seq=function(min,max,seed,amount,keepPool)
me=self
index=0
result=[]
while index<amount
temp=me.gen(min,max,seed)
result.push(temp)
index=index+1
end while
if (keepPool!=1) then me.pool.remove(seed)
return result
end function
Random.get=function(min,max)
return self.gen(min,max)
end function
print(Random.get(100,500))
print(Random.seq(100,500,\\"test\\",10))"
`;

exports[`parse default scripts random.src beautify 1`] = `
"Random = {}

Random.pool = {}
Random.defaultSeed = \\"random\\"

Random.createPool = function(seed, val)
	return {
		\\"seed\\": seed,
		\\"value\\": val,
		\\"generation\\": 0,
	}
end function

Random.calcSeed = function(seed)
	seedVal = 0
	pos = seed.len

	for char in seed
		seedVal = seedVal + char.code + pos
		pos = pos - 1
	end for

	return seedVal
end function

Random.gen = function(min, max, seed, inc)
	me = self
	pool = me.pool
	if inc == null then inc = true
	if seed == null then seed = me.defaultSeed
	if pool.hasIndex(seed) then
		ps = pool[seed]
		if not inc then return ps.value
		ps.generation = ps.generation + 1
		val = floor((rnd(ps.value + ps.generation) * (max - min)) + min)
		ps.value = val
		return val
	end if

	seedVal = me.calcSeed(seed)

	val = floor((rnd(seedVal) * (max - min)) + min)
	pool[seed] = me.createPool(seedVal, val)

	return val
end function

Random.seq = function(min, max, seed, amount, keepPool)
	me = self
	index = 0
	result = []
	while index < amount
		temp = me.gen(min, max, seed)
		result.push temp
		index = index + 1
	end while
	if keepPool != true then me.pool.remove(seed)
	return result
end function

Random.get = function(min, max)
	return self.gen(min, max)
end function

print Random.get(100, 500)
print Random.seq(
	100,
	500,
	\\"test\\",
	10)"
`;

exports[`parse default scripts random.src beautify with custom settings 1`] = `
"Random = {}

Random.pool = {}
Random.defaultSeed = \\"random\\"

Random.createPool = function(seed, val)
          return {
                    \\"seed\\": seed,
                    \\"value\\": val,
                    \\"generation\\": 0,
          }
end function

Random.calcSeed = function(seed)
          seedVal = 0
          pos = seed.len

          for char in seed
                    seedVal = seedVal + char.code + pos
                    pos -= 1
          end for

          return seedVal
end function

Random.gen = function(min, max, seed, inc)
          me = self
          pool = me.pool
          if inc == null then inc = true
          if seed == null then seed = me.defaultSeed
          if pool.hasIndex(seed) then
                    ps = pool[seed]
                    if not inc then return ps.value
                    ps.generation += 1
                    val = floor((rnd(ps.value + ps.generation) * (max - min)) + min)
                    ps.value = val
                    return val
          end if

          seedVal = me.calcSeed(seed)

          val = floor((rnd(seedVal) * (max - min)) + min)
          pool[seed] = me.createPool(seedVal, val)

          return val
end function

Random.seq = function(min, max, seed, amount, keepPool)
          me = self
          index = 0
          result = []
          while index < amount
                    temp = me.gen(min, max, seed)
                    result.push(temp)
                    index += 1
          end while
          if keepPool != true then me.pool.remove(seed)
          return result
end function

Random.get = function(min, max)
          return self.gen(min, max)
end function

print(Random.get(100, 500))
print(Random.seq(
          100,
          500,
          \\"test\\",
          10))"
`;

exports[`parse default scripts random.src uglify 1`] = `
"globals.I=globals
J={}
J.pool={}
J.defaultSeed=\\"random\\"
J.createPool=function(R,val)
return {\\"seed\\":R,\\"value\\":val,\\"generation\\":0}
end function
J.calcSeed=function(R)
S=0
T=R.len
for char in R
S=S+char.code+T
T=T-1
end for
return S
end function
J.gen=function(U,V,R,W)
X=self
K=X.pool
if (W==null) then W=1
if (R==null) then R=X.defaultSeed
if (K.hasIndex(R)) then
Y=K[R]
if (not W) then return Y.value
Y.generation=Y.generation+1
val=floor((rnd(Y.value+Y.generation)*(V-U))+U)
Y.value=val
return val
end if
S=X.calcSeed(R)
val=floor((rnd(S)*(V-U))+U)
K[R]=X.createPool(S,val)
return val
end function
J.seq=function(U,V,R,b,c)
X=self
d=0
e=[]
while d<b
f=X.gen(U,V,R)
e.push(f)
d=d+1
end while
if (c!=1) then X.pool.remove(R)
return e
end function
J.get=function(U,V)
return self.gen(U,V)
end function
print(J.get(100,500))
print(J.seq(100,500,\\"test\\",10))"
`;

exports[`parse default scripts simple-object.src 1`] = `
"test={}
test.here=\\"was\\"
test.was=function
super.here
print(self.here)
end function
print(test.was)"
`;

exports[`parse default scripts simple-object.src beautify 1`] = `
"test = {}

test.here = \\"was\\"

test.was = function
	super.here
	print self.here
end function

print test.was"
`;

exports[`parse default scripts simple-object.src beautify with custom settings 1`] = `
"test = {}

test.here = \\"was\\"

test.was = function
          super.here
          print(self.here)
end function

print(test.was)"
`;

exports[`parse default scripts simple-object.src uglify 1`] = `
"globals.I=globals
J={}
J.here=\\"was\\"
J.was=function
super.here
print(self.here)
end function
print(J.was)"
`;

exports[`parse default scripts slice.src 1`] = `
"divideString=function(str,limit)
offset=0
maxLen=str.len
frags=[]
while offset<maxLen
next=offset+limit
frags.push(str[offset:next])
offset=next
end while
return frags
end function
print(divideString(\\"blahhblahhblahhblahhblahhblahhgad\\",5))"
`;

exports[`parse default scripts slice.src beautify 1`] = `
"divideString = function(str, limit)
	offset = 0
	maxLen = str.len
	frags = []

	while offset < maxLen
		next = offset + limit
		frags.push str[offset : next]
		offset = next
	end while

	return frags
end function

print divideString(\\"blahhblahhblahhblahhblahhblahhgad\\", 5)"
`;

exports[`parse default scripts slice.src beautify with custom settings 1`] = `
"divideString = function(str, limit)
          offset = 0
          maxLen = str.len
          frags = []

          while offset < maxLen
                    next = offset + limit
                    frags.push(str[offset : next])
                    offset = next
          end while

          return frags
end function

print(divideString(\\"blahhblahhblahhblahhblahhblahhgad\\", 5))"
`;

exports[`parse default scripts slice.src uglify 1`] = `
"globals.I=globals
J=function(str,K)
L=0
M=str.len
N=[]
while L<M
O=L+K
N.push(str[L:O])
L=O
end while
return N
end function
print(J(\\"blahhblahhblahhblahhblahhblahhgad\\",5))"
`;

exports[`parse default scripts unary.src 1`] = `
"test=function
return null
end function
print(@\\"was\\".split and (0 or not 0))
print(@(\\"was\\".split and (0 or not 0)))
print(not \\"was\\".split and (0 or not 0))
print(not (\\"was\\".split and (0 or not 0)))
print(-1+2)
print(-(1+2))"
`;

exports[`parse default scripts unary.src beautify 1`] = `
"test = function
	return null
end function

print @\\"was\\".split and (false or not false)
print @(\\"was\\".split and (false or not false))
print not \\"was\\".split and (false or not false)
print not (\\"was\\".split and (false or not false))
print -1 + 2
print -(1 + 2)
"
`;

exports[`parse default scripts unary.src beautify with custom settings 1`] = `
"test = function
          return null
end function

print(@\\"was\\".split and (false or not false))
print(@(\\"was\\".split and (false or not false)))
print(not \\"was\\".split and (false or not false))
print(not (\\"was\\".split and (false or not false)))
print(-1 + 2)
print(-(1 + 2))
"
`;

exports[`parse default scripts unary.src uglify 1`] = `
"globals.I=globals
I.K=\\"was\\"
J=function
return null
end function
print(@K.split and (0 or not 0))
print(@(K.split and (0 or not 0)))
print(not K.split and (0 or not 0))
print(not (K.split and (0 or not 0)))
print(-1+2)
print(-(1+2))"
`;
